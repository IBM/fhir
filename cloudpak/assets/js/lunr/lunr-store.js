var store = [{
        "title": "Home",
        "collection": "1.0",
        "excerpt":"","categories": [],
        "tags": [],
        "url": "https://ibm.github.io/FHIR/cloudpak/1.0/",
        "teaser":null},{
        "title": "Introduction",
        "collection": "1.0",
        "excerpt":"IBM FHIR Server is capable of processing, validating, and storing healthcare data in an industry-standard format that can be used for running search and other reporting capabilities. Built for the enterprise and offering cloud portability, it’s an integral component of a data integration pipeline. By applying standardized semantics and data models in accordance with the HL7 Fast Healthcare Interoperability Resources (FHIR) specification, IBM FHIR Server makes it easier to maximize insights across systems. It enables capabilities like advanced analytics and machine learning, which can drive better health outcomes and organizational impact. IBM FHIR Server is built on an open-source Java™ implementation of HL7 FHIR Release 4. Organizations can receive enterprise-grade services and support, including troubleshooting, maintenance, and automated upgrades. ","categories": ["about"],
        "tags": [],
        "url": "https://ibm.github.io/FHIR/cloudpak/1.0/about/overview/",
        "teaser":null},{
        "title": "Documentation",
        "collection": "1.0",
        "excerpt":"  IBM FHIR Server WebSite  IBM FHIR Server User’s Guide  DockerHub: IBM FHIR Server - Schema Tool  DockerHub: IBM FHIR Server","categories": ["about"],
        "tags": [],
        "url": "https://ibm.github.io/FHIR/cloudpak/1.0/about/documentation/",
        "teaser":null},{
        "title": "License",
        "collection": "1.0",
        "excerpt":"The IBM FHIR Server is licensed under the Apache 2.0 license. Full license text is available at LICENSE. FHIR® is the registered trademark of HL7 and is used with the permission of HL7. Use of the FHIR trademark does not constitute endorsement of this product by HL7. IBM and the IBM logo are trademarks of International Business Machines Corporation, registered in many jurisdictions worldwide. Other product and service names might be trademarks of IBM or other companies. A current list of IBM trademarks is available on https://ibm.com/trademark. ","categories": ["about"],
        "tags": [],
        "url": "https://ibm.github.io/FHIR/cloudpak/1.0/about/license/",
        "teaser":null},{
        "title": "Prerequisites",
        "collection": "1.0",
        "excerpt":"  The IBM FHIR Server operator can be installed in an on-line cluster through the OpenShift CLI.  Multiple instances of the IBM FHIR Server operator may be deployed into different namespaces, one per namespace.Red Hat OpenShift Container Platform 4.5 or later installed on one of the following platforms:   Linux x86_64Connectivity to any of the following database systems:   IBM Db2 11.5 or later  PostgreSQL 12.1 or laterConnectivity to any of the following event streaming platforms (optional):   Kafka 1.0 or higherStorage   Storage for the database instance that the IBM FHIR Server connects to is outside the scope of this Operator.Resources Required       Describe Minimum System Resources Required     Minimum scheduling capacity:                             Software          Memory (GB)          CPU (cores)          Disk (GB)          Nodes                                      IBM FHIR Server          6          2          N/A          2                          Total          6          2          N/A          2                      Recommended scheduling capacity:                             Software          Memory (GB)          CPU (cores)          Disk (GB)          Nodes                                      IBM FHIR Server          64          16          N/A          3                          Total          64          16          N/A          3                      Note: There is an initContainer with the IBM FHIR Server called the IBM FHIR Server Schema Tool. This tool has a small memory footprint used on initialization of a pod and is accounted for in the above capacities.   Limitations   The Operator may be deployed into different namespaces, one per namespace.  The Operator has limited support for IBM FHIR Server configuration.Schema upgrades require downtime: The IBM FHIR Server requires downtime to complete upgrades of the IBM FHIR Server’s relational data. During the upgrade Values tables are refreshed, updated and optimized for the workloads that the FHIR specification supports. ","categories": ["installing"],
        "tags": [],
        "url": "https://ibm.github.io/FHIR/cloudpak/1.0/installing/prerequisites/",
        "teaser":null},{
        "title": "Installing",
        "collection": "1.0",
        "excerpt":"The following sections provide instructions about installing IBM FHIR Server on the Red Hat OpenShift Container Platform. The instructions are based on using the OpenShift Container Platform web console and oc command line utility. When deploying in an air-gapped environment see Air Gap Installation. Overview IBM FHIR Server is an operator-based release and uses custom resources to define your IBM FHIR Server configurations. The IBM FHIR Server operator uses the custom resources to deploy and manage the entire lifecycle of your IBM FHIR Server instances. Custom resources are presented as YAML configuration documents that define instances of the IBMFHIRServer custom resource type. Installing IBM FHIR Server has two phases:   Install the IBM FHIR Server operator: this will deploy the operator that will install and manage your IBM FHIR Server instances.  Install one or more instances of IBM FHIR Server by using the operator.Before you begin   Ensure you have set up your environment , including setting up your OpenShift Container Platform.  Obtain the connection details for your OpenShift Container Platform cluster from your administrator.Create a project (namespace) Create a namespace into which the IBM FHIR Server instance will be installed by creating a project.When you create a project, a namespace with the same name is also created. Ensure you use a namespace that is dedicated to a single instance of IBM FHIR Server. A single namespace per instance also allows for finer control of user accesses. Important: Do not use any of the default or system namespaces to install an instance of IBM FHIR Server (some examples of these are: default, kube-system, kube-public, and openshift-operators). Add the IBM FHIR Server operator to the catalog Before you can install the IBM FHIR Server operator and use it to create instances of IBM FHIR Server, you must have the IBM Operator Catalog available in your cluster. If you have other IBM products installed in your cluster, then you already have the IBM Operator Catalog available, and you can continue installing the IBM FHIR Server operator. If you are installing IBM FHIR Server as the first IBM product in your cluster, complete the following steps. To make the IBM FHIR Server operator available in the OpenShift OperatorHub catalog, create the following YAML files and apply them as  follows. To add the IBM Operator Catalog:       Create a file for the IBM Operator Catalog source with the following content, and save as IBMCatalogSource.yaml:     apiVersion: operators.coreos.com/v1alpha1kind: CatalogSourcemetadata:   name: ibm-operator-catalog   namespace: openshift-marketplacespec:   displayName: \"IBM Operator Catalog\"   publisher: IBM   sourceType: grpc   image: docker.io/ibmcom/ibm-operator-catalog   updateStrategy:     registryPoll:       interval: 45m        Log in to your Red Hat OpenShift Container Platform as a cluster administrator by using the oc CLI.      Apply the source by using the following command:     oc apply -f IBMCatalogSource.yaml   The IBM Operator Catalog source is added to the OperatorHub catalog, making the IBM FHIR Server operator available to install. Install Operator Install the Operator using the following method:       Red Hat OpenShift Container Platform web console                   Log into the OpenShift Container Platform web console using your login credentials.                     Navigate to OperatorHub and click on the IBM FHIR Server tile.                     Click Install.             ","categories": ["installing"],
        "tags": [],
        "url": "https://ibm.github.io/FHIR/cloudpak/1.0/installing/installing/",
        "teaser":null},{
        "title": "Air Gap Installation",
        "collection": "1.0",
        "excerpt":"Since air gap environments do not have access to the public internet, and therefore no access to DockerHub, the following preparation steps are necessary to make the required images accessable to the Red Hat OpenShift Container Platform cluster. If the Red Hat OpenShift Container Platform cluster has a Bastion host, ensure that the Bastion host can access:   The public internet to download the CASE and images.  The target (air gap) image registry where all the images will be mirrored to.  The Red Hat OpenShift Container Platform cluster to install the Operator on.In the absence of a Bastion host, a portable host with access to the public internet may used. By downloading the CASE and images onto the portable host, and then transporting the portable host into the air gap environment, the images can then be mirrored to the target (air gap) image registry. If using a Bastion host, refer to Using a Bastion host.If using a portable host, refer to Using a portable host. Using a Bastion host 1. Prepare the Bastion host Ensure you have the following installed on the Bastion host:   Docker CLI (docker)  IBM Cloud Pak CLI (cloudctl)  Red Hat OpenShift Container Platform CLI (oc)  Skopeo (skopeo)2. Download the CASE   Create a local directory in which to save the CASE.$ mkdir -p $HOME/offline  Save the CASE.$ cloudctl case save --case &lt;case-path&gt; --outputdir $HOME/offline  &lt;case-path&gt; is the path or URL to the CASE to save.The following output is displayed: Downloading and extracting the CASE ...- SuccessRetrieving CASE version ...- SuccessValidating the CASE ...- SuccessCreating inventory ...- SuccessFinding inventory items- SuccessResolving inventory items ...Parsing inventory items- Success  Verify the CASE (.tgz) file and images (.csv) file have been downloaded.$ ls $HOME/offlinechartsibm-fhir-server-case-&lt;version&gt;-charts.csvibm-fhir-server-case-&lt;version&gt;-images.csvibm-fhir-server-case-&lt;version&gt;.tgz  &lt;version&gt; is the CASE version.3. Log into cluster Log into the Red Hat OpenShift Container Platform cluster as a cluster administrator using the oc login command. 4. Configure target registry authentication secret For IBM FHIR Server, all images are available publicly in DockerHub, so no authentication secret for the source (public) registry is needed.   Create the authentication secret for the target (air gap) registry.$ cloudctl case launch \\    --case $HOME/offline/&lt;case-file&gt; \\    --inventory ibmFhirServerOperatorSetup \\    --action configure-creds-airgap \\    --args \"--registry &lt;target-registry&gt; --user &lt;registry-user&gt; --pass &lt;registry-password&gt;\"  &lt;case-file&gt; is the CASE file.  &lt;target-registry&gt; is the target registry.  &lt;registry-user&gt; is the username for the target registry.  &lt;registry-password&gt; is the password for the target registry.The credentials are saved to $HOME/.airgap/secrets/&lt;target-registry&gt;.json 5. Mirror images to target registry   Copy the images in the CASE from the source (public) registry to the target (air gap) registry.$ cloudctl case launch \\    --case $HOME/offline/&lt;case-file&gt; \\    --inventory ibmFhirServerOperatorSetup \\    --action mirror-images \\    --args \"--registry &lt;target-registry&gt; --inputDir $HOME/offline\"  &lt;case-file&gt; is the CASE file.  &lt;target-registry&gt; is the target registry.6. Configure cluster to access target registry   Configure a global image pull secret and ImageContentSourcePolicy resource.$ cloudctl case launch \\    --case $HOME/offline/&lt;case-file&gt; \\    --namespace openshift-marketplace \\    --inventory ibmFhirServerOperatorSetup \\    --action configure-cluster-airgap \\    --args \"--registry &lt;target-registry&gt; --inputDir $HOME/offline\"  &lt;case-file&gt; is the CASE file.  &lt;target-registry&gt; is the target registry.WARNING: This step may restart all cluster nodes. The cluster resources might be unavailable until the time the new pull secret is applied.   Optional: If you are using an insecure target registry, you must add the target registry to the cluster insecureRegistries list.$ oc patch image.config.openshift.io/cluster --type=merge \\    -p '{\"spec\":{\"registrySources\":{\"insecureRegistries\":[\"'&lt;target-registry&gt;'\"]}}}'  &lt;target-registry&gt; is the target registry.7. Proceed with installation Now that the air gap installation preparation steps are complete, you may continue with the IBM FHIR Server Operator installation. Using a portable host 1. Prepare the portable host Ensure you have the following installed on the portable host:   Docker CLI (docker)  IBM Cloud Pak CLI (cloudctl)  Red Hat OpenShift Container Platform CLI (oc)  Skopeo (skopeo)2. Download the CASE   Create a local directory in which to save the CASE.$ mkdir -p $HOME/offline  Save the CASE.$ cloudctl case save --case &lt;case-path&gt; --outputdir $HOME/offline  &lt;case-path&gt; is the path or URL to the CASE to save.The following output is displayed: Downloading and extracting the CASE ...- SuccessRetrieving CASE version ...- SuccessValidating the CASE ...- SuccessCreating inventory ...- SuccessFinding inventory items- SuccessResolving inventory items ...Parsing inventory items- Success3. Configure portable registry and authentication secret For IBM FHIR Server, all images are available publicly in DockerHub, so no authentication secret for the source (public) registry is needed.   Initialize the portable registry.$ cloudctl case launch \\    --case $HOME/offline/&lt;case-file&gt; \\    --inventory ibmFhirServerOperatorSetup \\    --action init-registry \\    --args \"--registry localhost --user &lt;registry-user&gt; --pass &lt;registry-password&gt; \\        --dir $HOME/offline/imageregistry\"  &lt;case-file&gt; is the CASE file.  &lt;registry-user&gt; is the username for the registry, which is initialized to this value.  &lt;registry-password&gt; is the password for the registry, which is initialized to this value.  Start the portable registry.$ cloudctl case launch \\    --case $HOME/offline/&lt;case-file&gt; \\    --inventory ibmFhirServerOperatorSetup \\    --action start-registry \\    --args \"--registry localhost --port 443 --user &lt;registry-user&gt; --pass &lt;registry-password&gt; \\        --dir $HOME/offline/imageregistry\"  &lt;case-file&gt; is the CASE file.  &lt;registry-user&gt; is the username for the registry.  &lt;registry-password&gt; is the password for the registry.  Create the authentication secret for the portable registry.$ cloudctl case launch \\    --case $HOME/offline/&lt;case-file&gt; \\    --inventory ibmFhirServerOperatorSetup \\    --action configure-creds-airgap \\    --args \"--registry localhost:443 --user &lt;registry-user&gt; --pass &lt;registry-password&gt;\"  &lt;case-file&gt; is the CASE file.  &lt;registry-user&gt; is the username for the registry.  &lt;registry-password&gt; is the password for the registry.The credentials are saved to $HOME/.airgap/secrets/localhost:443.json 4. Mirror images to portable registry   The following step copies the images in the CASE from the source (public) registry to the portable registry.$ cloudctl case launch \\    --case $HOME/offline/&lt;case-file&gt; \\    --inventory ibmFhirServerOperatorSetup \\    --action mirror-images \\    --args \"--registry localhost:443 --inputDir $HOME/offline\"  &lt;case-file&gt; is the CASE file.5. Transport portable device Now that the images are in the portable registry, transport the portable host into the air gap environment. 6. Log into the cluster Log into the Red Hat OpenShift Container Platform cluster as a cluster administrator using the oc login command. 7. Configure target registry authentication secret   Create the authentication secret for the target (air gap) registry.$ cloudctl case launch \\    --case $HOME/offline/&lt;case-file&gt; \\    --inventory ibmFhirServerOperatorSetup \\    --action configure-creds-airgap \\    --args \"--registry &lt;target-registry&gt; --user &lt;registry-user&gt; --pass &lt;registry-password&gt;\"  &lt;case-file&gt; is the CASE file.  &lt;target-registry&gt; is the target registry.  &lt;registry-user&gt; is the username for the target registry.  &lt;registry-password&gt; is the password for the target registry.The credentials are saved to $HOME/.airgap/secrets/$TARGET_REGISTRY.json 8. Mirror images to target registry   The following step copies the images in the CASE from the portable registry to the target (air gap) registry.$ cloudctl case launch \\    --case $HOME/offline/&lt;case-file&gt; \\    --inventory ibmFhirServerOperatorSetup \\    --action mirror-images \\    --args \"--fromRegistry localhost:443 --registry &lt;target-registry&gt; --inputDir $HOME/offline\"  &lt;case-file&gt; is the CASE file.  &lt;target-registry&gt; is the target registry.9. Configure cluster to access target registry   Configure a global image pull secret and ImageContentSourcePolicy resource.$ cloudctl case launch \\    --case $HOME/offline/&lt;case-file&gt; \\    --namespace openshift-marketplace \\    --inventory ibmFhirServerOperatorSetup \\    --action configure-cluster-airgap \\    --args \"--registry &lt;target-registry&gt; --inputDir $HOME/offline\"  &lt;case-file&gt; is the CASE file.  &lt;target-registry&gt; is the target registry.WARNING: This step may restart all cluster nodes. The cluster resources might be unavailable until the time the new pull secret is applied.   Optional: If you are using an insecure target registry, you must add the target registry to the cluster insecureRegistries list.$ oc patch image.config.openshift.io/cluster --type=merge \\    -p '{\"spec\":{\"registrySources\":{\"insecureRegistries\":[\"'&lt;target-registry&gt;'\"]}}}'  &lt;target-registry&gt; is the target registry.10. Proceed with installation Now that the air gap installation preparation steps are complete, you may continue with the installation IBM FHIR Server Operator installation. ","categories": ["installing"],
        "tags": [],
        "url": "https://ibm.github.io/FHIR/cloudpak/1.0/installing/air-gap-installation/",
        "teaser":null},{
        "title": "Creating an IBM FHIR Server",
        "collection": "1.0",
        "excerpt":"Prerequisites Installing an instance of IBM FHIR Server requires an installed IBM FHIR Server Operator.See Installing for instructions to install the IBM FHIR Server Operator. Installing an instance of IBM FHIR Server requires at least namespace administration privileges. If you intend to use CLI commands, ensure you have the following installed:   IBM Cloud Pak CLI (cloudctl)  Red Hat OpenShift Container Platform CLI (oc)Creating an instance Complete the following steps to create an instance of IBM FHIR Server. 1. Define IBM FHIR Server configuration Create Secret resource containing IBM FHIR Server configuration.   Define values for the following secret keys:      IBM_FHIR_SCHEMA_TOOL_INPUT     The value must be set to the contents of the configuration file for IBM FHIR Server Schema Tool.     See IBM FHIR Server Schema Tool for how to create a configuration file.     Put the contents of the configuration file in a file named persistence.json.         IBM_FHIR_SERVER_CONFIG     The value must be set to the contents of the fhir-server-config.json configuration file for IBM FHIR Server.     See IBM FHIR Server for how to create a fhir-server-config.json configuration file.     Put the contents of the configuration file in a file named fhir-server-config.json.         IBM_FHIR_SERVER_CERT     If using Postgres as the database, this value must be set to the public key of the intermediate CA certificate.     Put the public key of the intermediate CA certificate in a file named db.cert.     If using Db2 as the database, leave the file named db.cert empty.         IBM_FHIR_SERVER_ADMIN_PASSWORD     The value must be set to the admin password to use for the IBM FHIR Server.     Put the admin password in a file named admin.txt.         IBM_FHIR_SERVER_USER_PASSWORD     The value must be set to the user password to use for the IBM FHIR Server.     Put the user password in a file named user.txt.         IBM_FHIR_SERVER_HOST     The value must be set to the contents of a configuration file for defining the host.     See Defining the host for how to define the host.     Put the contents of the configuration file in a file named host.xml.     If you do not want to define the host, leave the file named host.xml empty.     Create the secret from the files.  $ oc create secret generic &lt;secret-name&gt; \\      --from-file=IBM_FHIR_SCHEMA_TOOL_INPUT=./persistence.json \\      --from-file=IBM_FHIR_SERVER_CONFIG=./fhir-server-config.json \\      --from-file=IBM_FHIR_SERVER_CERT=./db.cert \\      --from-file=IBM_FHIR_SERVER_ADMIN_PASSWORD=./admin.txt \\      --from-file=IBM_FHIR_SERVER_USER_PASSWORD=./user.txt \\      --from-file=IBM_FHIR_SERVER_HOSTNAME=./host.xml \\      --namespace=&lt;target-namespace&gt;  &lt;secret-name&gt; is the name of the secret to contain the IBM FHIR Server configuration.  &lt;target-namespace&gt; is the target namespace.2. Create IBM FHIR Server instance Create an instance of IBM FHIR Server of the following methods: Red Hat OpenShift Container Platform web console       Log into the OpenShift Container Platform web console using your login credentials.         Navigate to Installed Operators and click on IBM FHIR Server.         Click Create Instance on the IBMFHIRServer tile.         Enter a name for the instance, and enter the name of the Secret resource containing the IBM FHIR Server configuration.         Click Create.   Red Hat OpenShift Container Platform CLI   Create an IBMFHIRServer resource in the target namespace by editing the namespace and secret name in the sample file, files/fhirserver_v1beta1_ibmfhirserver.yaml, and then apply the file.  $ oc apply -f files/fhirserver_v1beta1_ibmfhirserver.yamlIBM Cloud Pak CLI   Run the apply-custom-resources action.  $ cloudctl case launch \\      --case case/ibm-fhir-server-case \\      --namespace &lt;target-namespace&gt; \\      --inventory ibmFhirServerOperator \\      --action apply-custom-resources \\      --args \"--secretName &lt;secret-name&gt;\"  &lt;target-namespace&gt; is the target namespace.  &lt;secret-name&gt; is the name of the Secret resource containing the IBM FHIR Server configuration.3. Accessing IBM FHIR Server instance   Verify the IBM FHIR Server instance is functional.  $ oc get ibmfhirservers -n &lt;target-namespace&gt;      &lt;target-namespace&gt; is the target namespace.     The READY value of “True” indicates the IBM FHIR Server instance is functional.     Connect to the IBM FHIR Server instance.  $ oc get services -n &lt;target-namespace&gt;      &lt;target-namespace&gt; is the target namespace.     To make external connections to the IBM FHIR Server instance, either port-forward or create a route to the service.     See the IBM FHIR Server User’s Guide for how to verify that it’s running properly by invoking the $healthcheck endpoint.   Scaling By default, the deployment will contain 2 replicas. Use the oc scale command to manually scale an IBM FHIR Server deployment. Defining the host It is recommended, for security purposes, to explicitly define the hosts for which the IBM FHIR Server will handle requests. For any Route resources created for the IBM FHIR Server, ensure those hosts (e.g. test-fhir-server) are represented in the configuration file. &lt;server description=\"fhir-server\"&gt;    &lt;httpEndpoint host=\"*\" httpPort=\"-1\" httpsPort=\"9443\" id=\"defaultHttpEndpoint\" onError=\"FAIL\" /&gt;    &lt;virtualHost id=\"default_host\" allowedFromEndpointRef=\"defaultHttpEndpoint\"&gt;      &lt;hostAlias&gt;*:9443&lt;/hostAlias&gt;      &lt;hostAlias&gt;test-fhir-server:443&lt;/hostAlias&gt;    &lt;/virtualHost&gt;&lt;/server&gt;Deleting an instance Delete an instance of IBM FHIR Server using the Red Hat OpenShift Container Platform web console.       Log into the OpenShift Container Platform web console using your login credentials.         Navigate to Installed Operators and click on IBM FHIR Server.         Navigate to the IBMFHIRServer tab and click on the instance you want to delete.         Select Delete IBMFHIRServer from the Actions menu.   ","categories": ["installing"],
        "tags": [],
        "url": "https://ibm.github.io/FHIR/cloudpak/1.0/installing/creating/",
        "teaser":null},{
        "title": "Tracking License Usage",
        "collection": "1.0",
        "excerpt":"License Service is required for monitoring and measuring license usage of IBM FHIR Server in accord with the pricing rule for containerized environments. Manual license measurements are not allowed. Deploy License Service on all clusters where IBM FHIR Server is installed. The IBM FHIR Server Operator contains an integrated service for measuring the license usage at the cluster level for license evidence purposes. Overview The integrated licensing solution collects and stores the license usage information which can be used for audit purposes and for tracking license consumption in cloud environments. The solution works in the background and does not require any configuration. Only one instance of the License Service is deployed per cluster regardless of the number of Cloud Paks and containerized products that you have installed on the cluster. Deploying License Service Deploy License Service on each cluster where IBM FHIR Server is installed. License Service can be deployed on any Kubernetes cluster. For more information about License Service, how to install and use it, see the License Service documentation. Validating if License Service is deployed on the cluster To ensure license reporting continuity for license compliance purposes make sure that License Service is successfully deployed. It is recommended to periodically verify whether it is active. To validate whether License Service is deployed and running on the cluster, you can, for example, log into the Red Hat OpenShift Container Platform cluster and run the following command: $ oc get pods --all-namespaces | grep ibm-licensing | grep -v operatorThe following response is a confirmation of successful deployment: 1/1     RunningArchiving license usage data Remember to archive the license usage evidence before you decommission the cluster where IBM FHIR Server was deployed. Retrieve the audit snapshot for the period when IBM FHIR Server was on the cluster and store it in case of audit. For more information about the licensing solution, see License Service documentation. ","categories": ["installing"],
        "tags": [],
        "url": "https://ibm.github.io/FHIR/cloudpak/1.0/installing/tracking-license/",
        "teaser":null},{
        "title": "Security",
        "collection": "1.0",
        "excerpt":"  The IBM FHIR Server is a stateless offering. It is the responsibility of the user to ensure that the proper security measures are established when using the server.Data in motion   All transports used to interact with IBM FHIR Server must be encrypted. TLS 1.2 is recommended.  Users are expected to use TLS when configuring their IBM FHIR Server to connect with their database instance.Data at rest   The prerequisite database must have data encryption enabled.  Each instance is responsible for Backup and Recovery of the Database and must backup solution specific configurations.","categories": ["security"],
        "tags": [],
        "url": "https://ibm.github.io/FHIR/cloudpak/1.0/security/security/",
        "teaser":null},{
        "title": "SecurityContextConstraints Requirements",
        "collection": "1.0",
        "excerpt":"By default, the IBM FHIR Server Operator uses the restricted SecurityContextConstraints resource. If desired, the following custom SecurityContextConstraints resource can be applied and used instead. apiVersion: security.openshift.io/v1kind: SecurityContextConstraintsmetadata:  name: ibm-fhir-server-operator-scc  annotations:    kubernetes.io/description: ibm-fhir-server-operator-scc denies access to all      host features and requires pods to be run with a UID, and SELinux context      that are allocated to the namespace, enforces readOnlyRootFilesystem, and      drops all capabilities.allowHostDirVolumePlugin: falseallowHostIPC: falseallowHostNetwork: falseallowHostPID: falseallowHostPorts: falseallowPrivilegeEscalation: falseallowPrivilegedContainer: falseallowedCapabilities: []defaultAddCapabilities: []groups: []fsGroup:  type: MustRunAspriority: nullreadOnlyRootFilesystem: truerequiredDropCapabilities:  - ALLrunAsUser:  type: MustRunAsRangeseLinuxContext:  type: MustRunAssupplementalGroups:  type: RunAsAnyusers: []volumes:  - configMap  - downwardAPI  - emptyDir  - persistentVolumeClaim  - projected  - secretTo cause the IBM FHIR Server Operator to use the custom SecurityContextConstraints resource.       Find the ibm-fhir-server-operator-sa ServiceAccount resource in the same namespace as the Operator.         Add the following to the rules in the ClusterRole resource that the ServiceAccount resource is bound to, and apply.   - apiGroups:    - security.openshift.io  resourceNames:    - ibm-fhir-server-operator-scc  resources:    - securitycontextconstraints  verbs:    - use  The IBM FHIR Server Operator also creates custom ClusterRole, ClusterRoleBinding, Role, RoleBinding, SecurityContextConstraints, and ServiceAccount resources to ensure separation of duties.","categories": ["security"],
        "tags": [],
        "url": "https://ibm.github.io/FHIR/cloudpak/1.0/security/security-context-constraints/",
        "teaser":null},{
        "title": "Home",
        "collection": "1.1",
        "excerpt":"","categories": [],
        "tags": [],
        "url": "https://ibm.github.io/FHIR/cloudpak/1.1/",
        "teaser":null},{
        "title": "Introduction",
        "collection": "1.1",
        "excerpt":"IBM FHIR Server is capable of processing, validating, and storing healthcare data in an industry-standard format that can be used for running search and other reporting capabilities. Built for the enterprise and offering cloud portability, it’s an integral component of a data integration pipeline. By applying standardized semantics and data models in accordance with the HL7® Fast Healthcare Interoperability Resources (FHIR) specification, IBM FHIR Server makes it easier to maximize insights across systems. It enables capabilities like advanced analytics and machine learning, which can drive better health outcomes and organizational impact. IBM FHIR Server is built on an open-source Java™ implementation of HL7 FHIR Release 4. Organizations can receive enterprise-grade services and support, including troubleshooting, maintenance, and automated upgrades. ","categories": ["about"],
        "tags": [],
        "url": "https://ibm.github.io/FHIR/cloudpak/1.1/about/overview/",
        "teaser":null},{
        "title": "What's New",
        "collection": "1.1",
        "excerpt":"IBM FHIR Server IBM FHIR Server for IBM Cloud Pak version 1.1.0 deploys with IBM FHIR Server 4.6.1. Refer to the IBM FHIR Server releases 4.5.4 through 4.6.1 for details on additions, modifications and fixes. Refer to Conformance for details on IBM FHIR Server 4.6.1 conformance to the HL7 FHIR Specification. Summary of changes   Enhancements to search capabilities and performance.  Overall improvements to query performance.  Bulk data function.          When Amazon AWS S3, you should use the endpointUrls. e.g. https://s3.us-east-2.amazonaws.com and not https://sbucketname.3.us-east-2.amazonaws.com        Datasource configuration uses Liberty configDropins. Refer to Upgrading for more details.  Database schema changes when upgrading from prior release.","categories": ["about"],
        "tags": [],
        "url": "https://ibm.github.io/FHIR/cloudpak/1.1/about/whats-new/",
        "teaser":null},{
        "title": "Documentation",
        "collection": "1.1",
        "excerpt":"  IBM FHIR Server WebSite  IBM FHIR Server User’s Guide  DockerHub: IBM FHIR Server - Schema Tool  DockerHub: IBM FHIR Server","categories": ["about"],
        "tags": [],
        "url": "https://ibm.github.io/FHIR/cloudpak/1.1/about/documentation/",
        "teaser":null},{
        "title": "License",
        "collection": "1.1",
        "excerpt":"The IBM FHIR Server is licensed under the Apache 2.0 license. Full license text is available at LICENSE. FHIR® is the registered trademark of HL7 and is used with the permission of HL7. Use of the FHIR trademark does not constitute endorsement of this product by HL7. IBM and the IBM logo are trademarks of International Business Machines Corporation, registered in many jurisdictions worldwide. Other product and service names might be trademarks of IBM or other companies. A current list of IBM trademarks is available on IBM Trademark. ","categories": ["about"],
        "tags": [],
        "url": "https://ibm.github.io/FHIR/cloudpak/1.1/about/license/",
        "teaser":null},{
        "title": "Prerequisites",
        "collection": "1.1",
        "excerpt":"Red Hat OpenShift Container Platform 4.6 or later installed on one of the following platforms:   Linux x86_64Connectivity to any of the following database systems:   IBM Db2 11.5.5 or later  PostgreSQL 12.1 or laterConnectivity to any of the following event streaming platforms is required if using auditing:   Kafka 1.0 or laterConnectivity to any S3-compatible storage platforms is required if using bulk data. Storage   Storage for the database instance that the IBM FHIR Server connects to is outside the scope of this Operator.Resources Required       Describe Minimum System Resources Required     Minimum scheduling capacity:                             Software          Memory (GB)          CPU (cores)          Disk (GB)          Nodes                                      IBM FHIR Server          6          2          N/A          2                          Total          6          2          N/A          2                      Recommended scheduling capacity:                             Software          Memory (GB)          CPU (cores)          Disk (GB)          Nodes                                      IBM FHIR Server          64          16          N/A          3                          Total          64          16          N/A          3                      Note: There is an initContainer with the IBM FHIR Server called the IBM FHIR Server Schema Tool. This tool has a small memory footprint used on initialization of a pod and is accounted for in the above capacities.   ","categories": ["installing"],
        "tags": [],
        "url": "https://ibm.github.io/FHIR/cloudpak/1.1/installing/prerequisites/",
        "teaser":null},{
        "title": "Limitations",
        "collection": "1.1",
        "excerpt":"  The Operator may be deployed into different namespaces, one per namespace.  The Operator has limited support for IBM FHIR Server configuration.  The Operator does not support prepackaged Implementation Guides.  Schema upgrades require downtime: The IBM FHIR Server requires downtime to complete upgrades of the IBM FHIR Server’s relational data. During the upgrade, the database’s schema is updated to support workload for the HL7 FHIR® specification.  There is no rollback from the upgrade and changes to the schema.","categories": ["installing"],
        "tags": [],
        "url": "https://ibm.github.io/FHIR/cloudpak/1.1/installing/limitations/",
        "teaser":null},{
        "title": "Upgrading",
        "collection": "1.1",
        "excerpt":"Upgrading from IBM FHIR Server operator 1.0.1 Prior to upgrading, it is recommended to create a new configuration secret (see Define IBM FHIR Server configuration for details). The new configuration secret will have the following changes from the existing configuration secret used in IBM FHIR Server operator 1.0.1:   The value for the IBM_FHIR_SERVER_CONFIG secret key must be updated with the following changes:          Remove persistence/jdbc/enableProxyDatasource      Remove persistence/jdbc/dataSourceJndiName      Remove persistence/datasources/&lt;dsid&gt;/connectionProperties        A new IBM_FHIR_SERVER_DATASOURCE secret key must be created.Until these secret keys are set, the IBM FHIR Server instance will not be functional. There is no rollback from the upgrade and changes to the schema. ","categories": ["installing"],
        "tags": [],
        "url": "https://ibm.github.io/FHIR/cloudpak/1.1/installing/upgrading/",
        "teaser":null},{
        "title": "Installing",
        "collection": "1.1",
        "excerpt":"The following sections provide instructions about installing IBM FHIR Server on the Red Hat OpenShift Container Platform. The instructions are based on using the OpenShift Container Platform web console and oc command line utility. When deploying in an air-gapped environment see Air Gap Installation. Overview IBM FHIR Server is an operator-based release and uses custom resources to define your IBM FHIR Server configurations. The IBM FHIR Server operator uses the custom resources to deploy and manage the entire lifecycle of your IBM FHIR Server instances. Custom resources are presented as YAML configuration documents that define instances of the IBMFHIRServer custom resource type. Installing IBM FHIR Server has two phases:   Install the IBM FHIR Server operator: this will deploy the operator that will install and manage your IBM FHIR Server instances.  Create one or more instances of IBM FHIR Server by using the operator.Before you begin   Ensure you have set up your environment, including setting up your OpenShift Container Platform.  Obtain the connection details for your OpenShift Container Platform cluster from your administrator.Create a project (namespace) Create a namespace into which the IBM FHIR Server instance will be installed by creating a project.When you create a project, a namespace with the same name is also created. Ensure you use a namespace that is dedicated to a single instance of IBM FHIR Server. A single namespace per instance also allows for finer control of user accesses. Important: Do not use any of the default or system namespaces to install an instance of IBM FHIR Server (some examples of these are: default, kube-system, kube-public, and openshift-operators). Add the IBM FHIR Server operator to the catalog Before you can install the IBM FHIR Server operator and use it to create instances of IBM FHIR Server, you must have the IBM Operator Catalog available in your cluster. If you have other IBM products installed in your cluster, then you already have the IBM Operator Catalog available, and you can continue installing the IBM FHIR Server operator. If you are installing IBM FHIR Server as the first IBM product in your cluster, complete the following steps. To make the IBM FHIR Server operator available in the OpenShift OperatorHub catalog, create the following YAML files and apply them as  follows. To add the IBM Operator Catalog:       Create a file for the IBM Operator Catalog source with the following content, and save as IBMCatalogSource.yaml:     apiVersion: operators.coreos.com/v1alpha1kind: CatalogSourcemetadata:   name: ibm-operator-catalog   namespace: openshift-marketplacespec:   displayName: \"IBM Operator Catalog\"   publisher: IBM   sourceType: grpc   image: docker.io/ibmcom/ibm-operator-catalog   updateStrategy:     registryPoll:       interval: 45m        Log in to your Red Hat OpenShift Container Platform as a cluster administrator by using the oc CLI.      Apply the source by using the following command:     oc apply -f IBMCatalogSource.yaml   The IBM Operator Catalog source is added to the OperatorHub catalog, making the IBM FHIR Server operator available to install. Install Operator Install the Operator using the following method:       Red Hat OpenShift Container Platform web console                   Log into the OpenShift Container Platform web console using your login credentials.                     Navigate to OperatorHub and click on the IBM FHIR Server tile.                     Click Install.             ","categories": ["installing"],
        "tags": [],
        "url": "https://ibm.github.io/FHIR/cloudpak/1.1/installing/installing/",
        "teaser":null},{
        "title": "Air Gap Installation",
        "collection": "1.1",
        "excerpt":"Since air gap environments do not have access to the public internet, and therefore no access to DockerHub, the following preparation steps are necessary to make the required images accessable to the Red Hat OpenShift Container Platform cluster. If the Red Hat OpenShift Container Platform cluster has a Bastion host, ensure that the Bastion host can access:   The public internet to download the CASE and images.  The target (air gap) image registry where all the images will be mirrored to.  The Red Hat OpenShift Container Platform cluster to install the Operator on.In the absence of a Bastion host, a portable host with access to the public internet may used. By downloading the CASE and images onto the portable host, and then transporting the portable host into the air gap environment, the images can then be mirrored to the target (air gap) image registry. If using a Bastion host, refer to Using a Bastion host.If using a portable host, refer to Using a portable host. Using a Bastion host 1. Prepare the Bastion host Ensure you have the following installed on the Bastion host:   Docker CLI (docker)  IBM Cloud Pak CLI (cloudctl)  Red Hat OpenShift Container Platform CLI (oc)  Skopeo (skopeo)2. Download the CASE   Create a local directory in which to save the CASE.$ mkdir -p $HOME/offline  Save the CASE.$ cloudctl case save --case &lt;case-path&gt; --outputdir $HOME/offline  &lt;case-path&gt; is the path or URL to the CASE to save.The following output is displayed: Downloading and extracting the CASE ...- SuccessRetrieving CASE version ...- SuccessValidating the CASE ...- SuccessCreating inventory ...- SuccessFinding inventory items- SuccessResolving inventory items ...Parsing inventory items- Success  Verify the CASE (.tgz) file and images (.csv) file have been downloaded.$ ls $HOME/offlinechartsibm-fhir-server-case-&lt;version&gt;-charts.csvibm-fhir-server-case-&lt;version&gt;-images.csvibm-fhir-server-case-&lt;version&gt;.tgz  &lt;version&gt; is the CASE version.3. Log into cluster Log into the Red Hat OpenShift Container Platform cluster as a cluster administrator using the oc login command. 4. Configure target registry authentication secret For IBM FHIR Server, all images are available publicly in DockerHub, so no authentication secret for the source (public) registry is needed.   Create the authentication secret for the target (air gap) registry.$ cloudctl case launch \\    --case $HOME/offline/&lt;case-file&gt; \\    --inventory ibmFhirServerOperatorSetup \\    --action configure-creds-airgap \\    --args \"--registry &lt;target-registry&gt; --user &lt;registry-user&gt; --pass &lt;registry-password&gt;\"  &lt;case-file&gt; is the CASE file.  &lt;target-registry&gt; is the target registry.  &lt;registry-user&gt; is the username for the target registry.  &lt;registry-password&gt; is the password for the target registry.The credentials are saved to $HOME/.airgap/secrets/&lt;target-registry&gt;.json 5. Mirror images to target registry   Copy the images in the CASE from the source (public) registry to the target (air gap) registry.$ cloudctl case launch \\    --case $HOME/offline/&lt;case-file&gt; \\    --inventory ibmFhirServerOperatorSetup \\    --action mirror-images \\    --args \"--registry &lt;target-registry&gt; --inputDir $HOME/offline\"  &lt;case-file&gt; is the CASE file.  &lt;target-registry&gt; is the target registry.6. Configure cluster to access target registry   Configure a global image pull secret and ImageContentSourcePolicy resource.$ cloudctl case launch \\    --case $HOME/offline/&lt;case-file&gt; \\    --namespace openshift-marketplace \\    --inventory ibmFhirServerOperatorSetup \\    --action configure-cluster-airgap \\    --args \"--registry &lt;target-registry&gt; --inputDir $HOME/offline\"  &lt;case-file&gt; is the CASE file.  &lt;target-registry&gt; is the target registry.WARNING: This step may restart all cluster nodes. The cluster resources might be unavailable until the time the new pull secret is applied.   Optional: If you are using an insecure target registry, you must add the target registry to the cluster insecureRegistries list.$ oc patch image.config.openshift.io/cluster --type=merge \\    -p '{\"spec\":{\"registrySources\":{\"insecureRegistries\":[\"'&lt;target-registry&gt;'\"]}}}'  &lt;target-registry&gt; is the target registry.7. Proceed with installation Now that the air gap installation preparation steps are complete, you may continue with the installation. Using a portable host 1. Prepare the portable host Ensure you have the following installed on the portable host:   Docker CLI (docker)  IBM Cloud Pak CLI (cloudctl)  Red Hat OpenShift Container Platform CLI (oc)  Skopeo (skopeo)2. Download the CASE   Create a local directory in which to save the CASE.$ mkdir -p $HOME/offline  Save the CASE.$ cloudctl case save --case &lt;case-path&gt; --outputdir $HOME/offline  &lt;case-path&gt; is the path or URL to the CASE to save.The following output is displayed: Downloading and extracting the CASE ...- SuccessRetrieving CASE version ...- SuccessValidating the CASE ...- SuccessCreating inventory ...- SuccessFinding inventory items- SuccessResolving inventory items ...Parsing inventory items- Success3. Configure portable registry and authentication secret For IBM FHIR Server, all images are available publicly in DockerHub, so no authentication secret for the source (public) registry is needed.   Initialize the portable registry.$ cloudctl case launch \\    --case $HOME/offline/&lt;case-file&gt; \\    --inventory ibmFhirServerOperatorSetup \\    --action init-registry \\    --args \"--registry localhost --user &lt;registry-user&gt; --pass &lt;registry-password&gt; \\        --dir $HOME/offline/imageregistry\"  &lt;case-file&gt; is the CASE file.  &lt;registry-user&gt; is the username for the registry, which is initialized to this value.  &lt;registry-password&gt; is the password for the registry, which is initialized to this value.  Start the portable registry.$ cloudctl case launch \\    --case $HOME/offline/&lt;case-file&gt; \\    --inventory ibmFhirServerOperatorSetup \\    --action start-registry \\    --args \"--registry localhost --port 443 --user &lt;registry-user&gt; --pass &lt;registry-password&gt; \\        --dir $HOME/offline/imageregistry\"  &lt;case-file&gt; is the CASE file.  &lt;registry-user&gt; is the username for the registry.  &lt;registry-password&gt; is the password for the registry.  Create the authentication secret for the portable registry.$ cloudctl case launch \\    --case $HOME/offline/&lt;case-file&gt; \\    --inventory ibmFhirServerOperatorSetup \\    --action configure-creds-airgap \\    --args \"--registry localhost:443 --user &lt;registry-user&gt; --pass &lt;registry-password&gt;\"  &lt;case-file&gt; is the CASE file.  &lt;registry-user&gt; is the username for the registry.  &lt;registry-password&gt; is the password for the registry.The credentials are saved to $HOME/.airgap/secrets/localhost:443.json 4. Mirror images to portable registry   The following step copies the images in the CASE from the source (public) registry to the portable registry.$ cloudctl case launch \\    --case $HOME/offline/&lt;case-file&gt; \\    --inventory ibmFhirServerOperatorSetup \\    --action mirror-images \\    --args \"--registry localhost:443 --inputDir $HOME/offline\"  &lt;case-file&gt; is the CASE file.5. Transport portable device Now that the images are in the portable registry, transport the portable host into the air gap environment. 6. Log into the cluster Log into the Red Hat OpenShift Container Platform cluster as a cluster administrator using the oc login command. 7. Configure target registry authentication secret   Create the authentication secret for the target (air gap) registry.$ cloudctl case launch \\    --case $HOME/offline/&lt;case-file&gt; \\    --inventory ibmFhirServerOperatorSetup \\    --action configure-creds-airgap \\    --args \"--registry &lt;target-registry&gt; --user &lt;registry-user&gt; --pass &lt;registry-password&gt;\"  &lt;case-file&gt; is the CASE file.  &lt;target-registry&gt; is the target registry.  &lt;registry-user&gt; is the username for the target registry.  &lt;registry-password&gt; is the password for the target registry.The credentials are saved to $HOME/.airgap/secrets/$TARGET_REGISTRY.json 8. Mirror images to target registry   The following step copies the images in the CASE from the portable registry to the target (air gap) registry.$ cloudctl case launch \\    --case $HOME/offline/&lt;case-file&gt; \\    --inventory ibmFhirServerOperatorSetup \\    --action mirror-images \\    --args \"--fromRegistry localhost:443 --registry &lt;target-registry&gt; --inputDir $HOME/offline\"  &lt;case-file&gt; is the CASE file.  &lt;target-registry&gt; is the target registry.9. Configure cluster to access target registry   Configure a global image pull secret and ImageContentSourcePolicy resource.$ cloudctl case launch \\    --case $HOME/offline/&lt;case-file&gt; \\    --namespace openshift-marketplace \\    --inventory ibmFhirServerOperatorSetup \\    --action configure-cluster-airgap \\    --args \"--registry &lt;target-registry&gt; --inputDir $HOME/offline\"  &lt;case-file&gt; is the CASE file.  &lt;target-registry&gt; is the target registry.WARNING: This step may restart all cluster nodes. The cluster resources might be unavailable until the time the new pull secret is applied.   Optional: If you are using an insecure target registry, you must add the target registry to the cluster insecureRegistries list.$ oc patch image.config.openshift.io/cluster --type=merge \\    -p '{\"spec\":{\"registrySources\":{\"insecureRegistries\":[\"'&lt;target-registry&gt;'\"]}}}'  &lt;target-registry&gt; is the target registry.10. Proceed with installation Now that the air gap installation preparation steps are complete, you may continue with the installation. ","categories": ["installing"],
        "tags": [],
        "url": "https://ibm.github.io/FHIR/cloudpak/1.1/installing/air-gap-installation/",
        "teaser":null},{
        "title": "Creating an IBM FHIR Server",
        "collection": "1.1",
        "excerpt":"Prerequisites Creating an instance of IBM FHIR Server requires an installed IBM FHIR Server Operator.See Installing for instructions to install the IBM FHIR Server Operator. Creating an instance of IBM FHIR Server requires at least namespace administration privileges. If you intend to use CLI commands, ensure you have the following installed:   IBM Cloud Pak CLI (cloudctl)  Red Hat OpenShift Container Platform CLI (oc)Creating an instance Complete the following steps to create an instance of IBM FHIR Server. 1. Define IBM FHIR Server configuration Create Secret resource containing IBM FHIR Server configuration.   Define values for the following secret keys:      IBM_FHIR_SCHEMA_TOOL_INPUT     The value must be set to the contents of the configuration file for IBM FHIR Server Schema Tool.     See Defining the schema tool input for configuring the input.     Put the contents of the configuration file in a file named persistence.json.         IBM_FHIR_SERVER_CONFIG     The value must be set to the contents of the fhir-server-config.json configuration file for IBM FHIR Server.     See IBM FHIR Server for how to create a fhir-server-config.json configuration file.     See creating the configuration for limitation and examples.     Put the contents of the configuration file in a file named fhir-server-config.json.         IBM_FHIR_SERVER_DATASOURCE     The value must be set to the contents of the datasource definition file for IBM FHIR Server.     See creating the datasource for limitation and examples.     Put the contents of the datasource definition file in a file named datasource.xml.         IBM_FHIR_SERVER_ADMIN_PASSWORD     The value must be set to the admin password to use for the IBM FHIR Server.     Put the admin password in a file named admin.txt.         IBM_FHIR_SERVER_USER_PASSWORD     The value must be set to the user password to use for the IBM FHIR Server.     Put the user password in a file named user.txt.         IBM_FHIR_SERVER_CERT     Defining this secret key is optional, but it is needed when using PostgreSQL as the database.     If defined, the value must be set to the public key of the intermediate CA certificate.     Put the public key of the intermediate CA certificate in a file named db.cert.         IBM_FHIR_SERVER_HOST     Defining this secret key is optional.     If defined, the value must be set to the contents of a configuration file for defining the host.     Put the contents of the configuration file in a file named host.xml.     See Defining the host for how to define the host.         IBM_FHIR_SERVER_TRACE_SPEC     Defining this secret key is optional.     If defined, the value must be set to the contents of a configuration file for defining the trace level.     Put the contents of the configuration file in a file named trace.txt.     See defining the trace specification for how to define the timeout.         IBM_FHIR_SERVER_TRANSACTION_TIMEOUT     Defining this secret key is optional.     If defined, the value must be set to the contents of a configuration file for defining the timeout. You should start with 240s     Put the contents of the configuration file in a file named timeout.txt.     See defining the transaction timeout for how to define the timeout.     Create the secret from the files.Note: Any keys that are optional do not need to be created in the secret if they are not needed for the configuration.   $ oc create secret generic &lt;secret-name&gt; \\      --from-file=IBM_FHIR_SCHEMA_TOOL_INPUT=./persistence.json \\      --from-file=IBM_FHIR_SERVER_CONFIG=./fhir-server-config.json \\      --from-file=IBM_FHIR_SERVER_DATASOURCE=./datasource.xml \\      --from-file=IBM_FHIR_SERVER_ADMIN_PASSWORD=./admin.txt \\      --from-file=IBM_FHIR_SERVER_USER_PASSWORD=./user.txt \\      --from-file=IBM_FHIR_SERVER_CERT=./db.cert \\      --from-file=IBM_FHIR_SERVER_HOST=./host.xml \\      --from-file=IBM_FHIR_SERVER_TRACE_SPEC=./trace.txt \\      --from-file=IBM_FHIR_SERVER_TRANSACTION_TIMEOUT=./timeout.txt \\      --namespace=&lt;target-namespace&gt;  &lt;secret-name&gt; is the name of the secret to contain the IBM FHIR Server configuration.  &lt;target-namespace&gt; is the target namespace.2. Create IBM FHIR Server instance Create an instance of IBM FHIR Server using one of the following methods: Red Hat OpenShift Container Platform web console       Log into the OpenShift Container Platform web console using your login credentials.         Change the Project to the namespace you want to work with.         Navigate to Installed Operators and click on IBM FHIR Server.         Click Create Instance on the IBMFHIRServer tile.         Enter a name for the instance, and enter the name of the Secret resource containing the IBM FHIR Server configuration.         Set License accept to true.         Click Create.   Red Hat OpenShift Container Platform CLI   Create an IBMFHIRServer resource in the target namespace by editing secret name and changing license accept to ‘true’ in the sample file, files/fhirserver_v1beta1_ibmfhirserver.yaml, and then apply the file.  $ oc apply -f files/fhirserver_v1beta1_ibmfhirserver.yaml -n &lt;target-namespace&gt;  &lt;target-namespace&gt; is the target namespace.IBM Cloud Pak CLI   Run the apply-custom-resources action.  $ cloudctl case launch \\      --case case/ibm-fhir-server-case \\      --namespace &lt;target-namespace&gt; \\      --inventory ibmFhirServerOperator \\      --action apply-custom-resources \\      --args \"--secretName &lt;secret-name&gt;\"  &lt;target-namespace&gt; is the target namespace.  &lt;secret-name&gt; is the name of the Secret resource containing the IBM FHIR Server configuration.Note, by running this action you accept the license. 3. Accessing IBM FHIR Server instance   Verify the IBM FHIR Server instance is functional.  $ oc get ibmfhirservers -n &lt;target-namespace&gt;      &lt;target-namespace&gt; is the target namespace.     The READY value of “True” indicates the IBM FHIR Server instance is functional. The instance will not be functional if the license was not accepted.     Connect to the IBM FHIR Server instance.  $ oc get services -n &lt;target-namespace&gt;      &lt;target-namespace&gt; is the target namespace.     To make external connections to the IBM FHIR Server instance, either port-forward or create a route to the service.     See the IBM FHIR Server User’s Guide for how to verify that it’s running properly by invoking the $healthcheck endpoint.   Updating an instance 1. Update IBM FHIR Server configuration Create a new Secret with the updated configuration by following the Define IBM FHIR Server configuration instructions. 2. Update IBM FHIR Server instance Update the existing instance of IBM FHIR Server to use the new Secret using one of the following methods: Red Hat OpenShift Container Platform web console       Log into the OpenShift Container Platform web console using your login credentials.         Change the Project to the namespace you want to work with.         Navigate to Installed Operators and click on IBM FHIR Server.         Click the IBM FHIR Server tab.         Click on the instance.         Click the YAML tab.         Update the spec.secretName field with name of the Secret resource containing the IBM FHIR Server configuration.         Click Save.   Red Hat OpenShift Container Platform CLI   Update the IBMFHIRServer resource in the target namespace by editing secret name and changing license accept to ‘true’ in the sample file, files/fhirserver_v1beta1_ibmfhirserver.yaml, and then apply the file.  $ oc apply -f files/fhirserver_v1beta1_ibmfhirserver.yaml -n &lt;target-namespace&gt;  &lt;target-namespace&gt; is the target namespace.IBM Cloud Pak CLI   Run the apply-custom-resources action.  $ cloudctl case launch \\      --case case/ibm-fhir-server-case \\      --namespace &lt;target-namespace&gt; \\      --inventory ibmFhirServerOperator \\      --action apply-custom-resources \\      --args \"--secretName &lt;secret-name&gt;\"  &lt;target-namespace&gt; is the target namespace.  &lt;secret-name&gt; is the name of the Secret resource containing the IBM FHIR Server configuration.Note, by running this action you accept the license. Scaling By default, the deployment uses 2 replicas. Use the oc scale command to manually scale an IBM FHIR Server deployment. Defining the schema tool input For the IBM FHIR Server Schema Tool, the database must be configured with a functional user, which is referred to as FHIRSERVER. Db2 The type must be specified as ‘db2’, the behavior must be ‘onboard’, and the corresponding database settings must be input into the json format. The tenant name must be default. Example: persistence.json   {      \"persistence\": [          {              \"db\":  {                  \"host\": \"example.appdomain.cloud\",                  \"port\": \"20010\",                  \"database\": \"bludb\",                  \"user\": \"myuser\",                  \"password\": \"password\",                  \"type\": \"db2\",                  \"ssl\": \"true\"              },              \"tenant\": {                  \"name\": \"default\",                  \"key\": \"custom-key-here\"              },              \"schema\": {                  \"fhir\": \"FHIRDATA\",                  \"batch\": \"FHIR_JBATCH\",                  \"oauth\": \"FHIR_OAUTH\"              },              \"grant\":  \"FHIRSERVER\",              \"behavior\": \"onboard\"          }      ]  }For db2, it is recommended that the granted user, and the schemas be configured as uppercase.  Further, the user schema names up to database limited sizes. Whatever is chosen as the schema name must match in the datasource.xml and the fhir-server-config.json. The tenant-key is further used in the fhir-server-config.json to authorize the configuration’s access to the fhir schema’s data partition. Postgres The type must be specified as ‘postgresql’, the behavior must be ‘onboard’, and the corresponding database settings must be input into the json format. The certificate must be the base64 encoding of the trusted Certificate Authority of the Database server. Example: persistence.json   {      \"persistence\": [          {              \"db\":  {                  \"host\": \"example.appdomain.cloud\",                  \"port\": \"13999\",                  \"database\": \"ibmclouddb\",                  \"user\": \"dbuser\",                  \"password\": \"password\",                  \"type\": \"postgresql\",                  \"ssl\": \"true\",                  \"certificate_base64\": \"DWHuqdAPsuE67b4FP3mdUYVnY99wjCPm2vYA\"              },              \"schema\": {                  \"fhir\": \"FHIRDATA\",                  \"batch\": \"FHIR_JBATCH\",                  \"oauth\": \"FHIR_OAUTH\"              },              \"grant\":  \"FHIRSERVER\",              \"behavior\": \"onboard\"          }      ]  }For postgres, it is recommended that the granted user, and the schemas be configured as uppercase.  Further, the user schema names up to database limited sizes. Whatever is chosen as the schema name must match in the datasource.xml and the fhir-server-config.json. For production usage, the input must be specified as \"ssl\": \"true\". It is not recommended to not use ssl. Note, the schema tool does not support Apache Derby. The configuration does not support multiple tenants. For more detail, see IBM FHIR Server Schema Tool for how to create a configuration file. Creating the configuration The installer of the IBM FHIR Server must make sure the configuration is a valid IBM FHIR Server json, and a fhirServer/persistence/datasources entry must be created for postgresql or db2. The currentSchema must match the schema/fhir entry in the persistence.json. For db2, the tenantKey must match the entry in persistence.json. The hints and searchOptimizerOptions must be specified. Example: db2 \"datasources\": {    \"default\": {        \"type\": \"db2\",        \"tenantKey\": \"custom-key-here\",        \"currentSchema\": \"FHIRDATA\",        \"hints\": {            \"search.reopt\": \"ONCE\"        }    }Example: postgresql \"datasources\": {    \"default\": {        \"type\": \"postgresql\",        \"currentSchema\": \"FHIRDATA\",        \"searchOptimizerOptions\": {            \"from_collapse_limit\": 12,            \"join_collapse_limit\": 12        }    }}Note, the schema tool does not support Apache Derby. The configuration does not support multiple tenants. Please note that the configuration does not support File,Http with the Bulkdata feature. To view examples of the IBM FHIR Server fhir-server-config.json, please refer to https://github.com/IBM/FHIR/tree/4.6.1/fhir-server/liberty-config/config/default. The documentation of the possible configuration elements are https://github.com/IBM/FHIR/tree/4.6.1/fhir-server/liberty-config/config/default. Creating the datasource The datasources must be configured with the default tenant and default datastore. The IBM FHIR Server uses the format jdbc/fhir_ and the tenant id and datastore id to look the datasource when executing any FHIR data operation.  The jdbc/fhirbatchDB is fixed, and must not be changed in order to use the bulk data feature. The configuration must match the configuration defined in the persistence.json secret. Db2 The following is an example of the db2 datasource to support bulk data and fhir data.   &lt;server&gt;      &lt;dataSource id=\"fhirDefaultDefault\" jndiName=\"jdbc/fhir_default_default\" type=\"javax.sql.XADataSource\" statementCacheSize=\"200\" syncQueryTimeoutWithTransactionTimeout=\"true\" validationTimeout=\"30s\"&gt;          &lt;jdbcDriver javax.sql.XADataSource=\"com.ibm.db2.jcc.DB2XADataSource\" libraryRef=\"sharedLibDb2\"/&gt;          &lt;properties.db2.jcc              serverName=\"example.appdomain.cloud\"              portNumber=\"20010\"              user=\"fhirserver\"              password=\"change-password\"              databaseName=\"FHIRDB\"              currentSchema=\"FHIRDATA\"              driverType=\"4\"              sslConnection=\"true\"          /&gt;          &lt;connectionManager maxPoolSize=\"200\" minPoolSize=\"40\"/&gt;      &lt;/dataSource&gt;      &lt;dataSource id=\"fhirbatchDS\" jndiName=\"jdbc/fhirbatchDB\" type=\"javax.sql.XADataSource\" statementCacheSize=\"200\" syncQueryTimeoutWithTransactionTimeout=\"true\" validationTimeout=\"30s\"&gt;          &lt;jdbcDriver javax.sql.XADataSource=\"com.ibm.db2.jcc.DB2XADataSource\" libraryRef=\"sharedLibDb2\"/&gt;          &lt;properties.db2.jcc              serverName=\"example.appdomain.cloud\"              portNumber=\"20010\"              user=\"fhirserver\"              password=\"change-password\"              databaseName=\"FHIRDB\"              currentSchema=\"FHIR_JBATCH\"              driverType=\"4\"              sslConnection=\"true\"/&gt;      &lt;/dataSource&gt;  &lt;/server&gt;Postgres The following is an example of the postgres datasource to support bulk data and fhir data.   &lt;server&gt;      &lt;dataSource id=\"fhirDefaultDefault\" jndiName=\"jdbc/fhir_default_default\" type=\"javax.sql.XADataSource\" statementCacheSize=\"200\" syncQueryTimeoutWithTransactionTimeout=\"true\" validationTimeout=\"30s\"&gt;          &lt;jdbcDriver javax.sql.XADataSource=\"org.postgresql.xa.PGXADataSource\" libraryRef=\"sharedLibPostgres\"/&gt;          &lt;properties.postgresql              serverName=\"example.appdomain.cloud\"              portNumber=\"13999\"              databaseName=\"ibmclouddb\"              user=\"fhirserver\"              password=\"change-password\"              currentSchema=\"fhirdata\"              sslmode=\"verify-full\"              ssl=\"true\"              sslrootcert=\"/opt/ol/wlp/usr/servers/fhir-server/config/default/db.cert\"          /&gt;          &lt;connectionManager maxPoolSize=\"200\" minPoolSize=\"40\"/&gt;      &lt;/dataSource&gt;      &lt;dataSource id=\"fhirbatchDS\" jndiName=\"jdbc/fhirbatchDB\" type=\"javax.sql.XADataSource\" statementCacheSize=\"200\" syncQueryTimeoutWithTransactionTimeout=\"true\" validationTimeout=\"30s\"&gt;          &lt;jdbcDriver javax.sql.XADataSource=\"org.postgresql.xa.PGXADataSource\" libraryRef=\"sharedLibPostgres\"/&gt;          &lt;properties.postgresql              serverName=\"example.appdomain.cloud\"              portNumber=\"13999\"              databaseName=\"ibmclouddb\"              user=\"fhirserver\"              password=\"change-password\"              currentSchema=\"FHIR_JBATCH\"              sslmode=\"verify-full\"              ssl=\"true\"              sslrootcert=\"/opt/ol/wlp/usr/servers/fhir-server/config/default/db.cert\"          /&gt;          &lt;connectionManager maxPoolSize=\"200\" minPoolSize=\"40\"/&gt;      &lt;/dataSource&gt;  &lt;/server&gt;Note, the schema tool does not support Apache Derby. The configuration does not support multiple tenants and does not support multiple datasources. Note, the sslrootcert is a fixed path mounted by the IBM FHIR Server Operator. See IBM FHIR Server for how to create a datasource definition file via Liberty configDropin. Defining the host It is recommended, for security purposes, to explicitly define the hosts for which the IBM FHIR Server will handle requests. For any Route resources created for the IBM FHIR Server, ensure those hosts (e.g. test-fhir-server) are represented in the configuration file. For example, the following configuration limits access to 9443 locally on the server, and the incoming route https://my-fhir-server.com. The host should match the host defined in the route. &lt;server description=\"fhir-server\"&gt;    &lt;httpEndpoint host=\"*\" httpPort=\"-1\" httpsPort=\"9443\" id=\"defaultHttpEndpoint\" onError=\"FAIL\" /&gt;    &lt;virtualHost id=\"default_host\" allowedFromEndpointRef=\"defaultHttpEndpoint\"&gt;      &lt;hostAlias&gt;*:9443&lt;/hostAlias&gt;      &lt;hostAlias&gt;my-fhir-server.com:443&lt;/hostAlias&gt;    &lt;/virtualHost&gt;&lt;/server&gt;Defining the trace specification The Trace specification is the WLP specification.   Normal Operation - *=info  Trace Database access - *=info:com.ibm.fhir.persistence.jdbc.dao.impl.*=fine  Trace all IBM FHIR Server - *=info:com.ibm.fhir.*=fineDefining the transaction timeout The timeout controls the transaction timeout used when the IBM FHIR Server cluster connects to the user defined database. This value is the maximum time allowed for transactions started on the server to complete. Any transaction must be complete before this timeout, or the transaction is rolled back. Specify a positive integer followed by a unit of time, which can be hours (h), minutes (m), or seconds (s). For example, specify 30 seconds as 30s. You can include multiple values in a single entry. For example, 1m30s is equivalent to 90 seconds. The timeout value should not be smaller than 240 seconds. ","categories": ["installing"],
        "tags": [],
        "url": "https://ibm.github.io/FHIR/cloudpak/1.1/installing/creating/",
        "teaser":null},{
        "title": "Tracking License Usage",
        "collection": "1.1",
        "excerpt":"License Service is required for monitoring and measuring license usage of IBM FHIR Server in accord with the pricing rule for containerized environments. Manual license measurements are not allowed. Deploy License Service on all clusters where IBM FHIR Server is installed. The IBM FHIR Server Operator contains an integrated service for measuring the license usage at the cluster level for license evidence purposes. Overview The integrated licensing solution collects and stores the license usage information which can be used for audit purposes and for tracking license consumption in cloud environments. The solution works in the background and does not require any configuration. Only one instance of the License Service is deployed per cluster regardless of the number of Cloud Paks and containerized products that you have installed on the cluster. Deploying License Service Deploy License Service on each cluster where IBM FHIR Server is installed. License Service can be deployed on any Kubernetes cluster. For more information about License Service, how to install and use it, see the License Service documentation. Validating if License Service is deployed on the cluster To ensure license reporting continuity for license compliance purposes make sure that License Service is successfully deployed. It is recommended to periodically verify whether it is active. To validate whether License Service is deployed and running on the cluster, you can, for example, log into the Red Hat OpenShift Container Platform cluster and run the following command: $ oc get pods --all-namespaces | grep ibm-licensing | grep -v operatorThe following response is a confirmation of successful deployment: 1/1     RunningArchiving license usage data Remember to archive the license usage evidence before you decommission the cluster where IBM FHIR Server was deployed. Retrieve the audit snapshot for the period when IBM FHIR Server was on the cluster and store it in case of audit. For more information about the licensing solution, see License Service documentation. ","categories": ["installing"],
        "tags": [],
        "url": "https://ibm.github.io/FHIR/cloudpak/1.1/installing/tracking-license/",
        "teaser":null},{
        "title": "Uninstalling",
        "collection": "1.1",
        "excerpt":"You can delete an IBM FHIR Server instance by using the OpenShift Container Platform web console. You can also uninstall the IBM FHIR Server operator and the catalog. Deleting an IBM FHIR Server instance       Log into the OpenShift Container Platform web console using your login credentials.         Change the Project to the namespace you want to work with.         Navigate to Installed Operators and click on the IBM FHIR Server operator.         Navigate to the IBM FHIR Server tab and click on the instance you want to delete.         Select Delete IBMFHIRServer from the Actions menu.   Uninstalling the Operator       Log into the OpenShift Container Platform web console using your login credentials.         Change the Project to the namespace you want to work with.         Navigate to Installed Operators and click on the IBM FHIR Server operator.         Select Uninstall Operator from the Actions menu.   Uninstalling the catalog The latest version of the IBM Operator Catalog includes the IBM FHIR Server Operator. If that catalog is installed, you may have skipped creating the ibm-fhir-server-operator-catalog CatalogSource resource, in which case, these instructions do not apply.       Log into the OpenShift Container Platform web console using your login credentials.         Navigate to Custom Resource Definitions and click on CatalogSource.         Navigate to the Instances tab and click on ibm-fhir-server-operator-catalog.         Select Delete CatalogSource from the Actions menu.   ","categories": ["installing"],
        "tags": [],
        "url": "https://ibm.github.io/FHIR/cloudpak/1.1/installing/uninstalling/",
        "teaser":null},{
        "title": "Security",
        "collection": "1.1",
        "excerpt":"Data in motion   To secure all inbound and outbound requests from the IBM FHIR Server are recommended to be encrypted.  Users are recommended to use TLS v1.2.Data at rest   The prerequisite database must have data encryption enabled.  Each instance is responsible for Backup and Recovery of the Database and must backup solution specific configurations.","categories": ["security"],
        "tags": [],
        "url": "https://ibm.github.io/FHIR/cloudpak/1.1/security/security/",
        "teaser":null},{
        "title": "SecurityContextConstraints Requirements",
        "collection": "1.1",
        "excerpt":"By default, the IBM FHIR Server Operator uses the restricted SecurityContextConstraints resource. If desired, the following custom SecurityContextConstraints resource can be applied and used instead. apiVersion: security.openshift.io/v1kind: SecurityContextConstraintsmetadata:  name: ibm-fhir-server-operator-scc  annotations:    kubernetes.io/description: ibm-fhir-server-operator-scc denies access to all      host features and requires pods to be run with a UID, and SELinux context      that are allocated to the namespace, enforces readOnlyRootFilesystem, and      drops all capabilities.allowHostDirVolumePlugin: falseallowHostIPC: falseallowHostNetwork: falseallowHostPID: falseallowHostPorts: falseallowPrivilegeEscalation: falseallowPrivilegedContainer: falseallowedCapabilities: []defaultAddCapabilities: []groups: []fsGroup:  type: MustRunAspriority: nullreadOnlyRootFilesystem: truerequiredDropCapabilities:  - ALLrunAsUser:  type: MustRunAsRangeseLinuxContext:  type: MustRunAssupplementalGroups:  type: RunAsAnyusers: []volumes:  - configMap  - downwardAPI  - emptyDir  - persistentVolumeClaim  - projected  - secretTo cause the IBM FHIR Server Operator to use the custom SecurityContextConstraints resource.       Find the ibm-fhir-server-operator-sa ServiceAccount resource in the same namespace as the Operator.         Add the following to the rules in the ClusterRole resource that the ServiceAccount resource is bound to, and apply.   - apiGroups:    - security.openshift.io  resourceNames:    - ibm-fhir-server-operator-scc  resources:    - securitycontextconstraints  verbs:    - useThe IBM FHIR Server Operator also creates custom ClusterRole, ClusterRoleBinding, Role, RoleBinding, SecurityContextConstraints, and ServiceAccount resources to ensure separation of duties. ","categories": ["security"],
        "tags": [],
        "url": "https://ibm.github.io/FHIR/cloudpak/1.1/security/security-context-constraints/",
        "teaser":null},{
        "title": "Home",
        "collection": "1.2",
        "excerpt":"","categories": [],
        "tags": [],
        "url": "https://ibm.github.io/FHIR/cloudpak/",
        "teaser":null},{
        "title": "Introduction",
        "collection": "1.2",
        "excerpt":"IBM FHIR Server is capable of processing, validating, and storing healthcare data in an industry-standard format that can be used for running search and other reporting capabilities. Built for the enterprise and offering cloud portability, it’s an integral component of a data integration pipeline. By applying standardized semantics and data models in accordance with the HL7® Fast Healthcare Interoperability Resources (FHIR) specification, IBM FHIR Server makes it easier to maximize insights across systems. It enables capabilities like advanced analytics and machine learning, which can drive better health outcomes and organizational impact. IBM FHIR Server is built on an open-source Java™ implementation of HL7 FHIR Release 4. Organizations can receive enterprise-grade services and support, including troubleshooting, maintenance, and automated upgrades. ","categories": ["about"],
        "tags": [],
        "url": "https://ibm.github.io/FHIR/cloudpak/about/overview/",
        "teaser":null},{
        "title": "What's New",
        "collection": "1.2",
        "excerpt":"IBM FHIR Server IBM FHIR Server version 1.2.0 is built on open-source IBM FHIR Server 4.9.1. Refer to the open-source IBM FHIR Server releases 4.7.0 through 4.9.1 for details on additions, modifications, deprecations and fixes. Refer to Conformance for details on open-source IBM FHIR Server 4.9.1 conformance to the HL7 FHIR Specification. Summary of changes   Enhancements to:          search and read interactions      terminology service      validation      bulk data      reindex        Overall improvements to performance  New APIs:          Patient/$everything      $erase        Liberty server name changed from fhir-server to defaultServer  Database schema changes when upgrading from prior release  IBM FHIR Server operands reside in the IBM Entitled Registry and require an entitlement key to install","categories": ["about"],
        "tags": [],
        "url": "https://ibm.github.io/FHIR/cloudpak/about/whats-new/",
        "teaser":null},{
        "title": "Documentation",
        "collection": "1.2",
        "excerpt":"  IBM FHIR Server WebSite  IBM FHIR Server User’s Guide","categories": ["about"],
        "tags": [],
        "url": "https://ibm.github.io/FHIR/cloudpak/about/documentation/",
        "teaser":null},{
        "title": "License",
        "collection": "1.2",
        "excerpt":"The IBM FHIR Server is licensed under the Apache 2.0 license. Full license text is available at LICENSE. FHIR® is the registered trademark of HL7 and is used with the permission of HL7. Use of the FHIR trademark does not constitute endorsement of this product by HL7. IBM and the IBM logo are trademarks of International Business Machines Corporation, registered in many jurisdictions worldwide. Other product and service names might be trademarks of IBM or other companies. A current list of IBM trademarks is available on IBM Trademark. ","categories": ["about"],
        "tags": [],
        "url": "https://ibm.github.io/FHIR/cloudpak/about/license/",
        "teaser":null},{
        "title": "Prerequisites",
        "collection": "1.2",
        "excerpt":"Red Hat OpenShift Container Platform 4.6 or later installed on one of the following platforms:   Linux x86_64Connectivity to any of the following database systems:   IBM Db2 11.5.5 or later  PostgreSQL 12.1 or later          If using the IBM FHIR Server Bulk Data feature, the max_prepared_transactions setting must be non-zero.  The IBM FHIR Server team recommends a setting of 200.      Connectivity to any of the following event streaming platforms is required if using auditing:   Kafka 1.0 or laterConnectivity to any S3-compatible or Azure Blob storage platforms is required if using bulk data. Storage   Storage for the database instance that the IBM FHIR Server connects to is outside the scope of this Operator.Resources Required       Describe Minimum System Resources Required     Minimum scheduling capacity:                             Software          Memory (GB)          CPU (cores)          Disk (GB)          Nodes                                      IBM FHIR Server          6          2          N/A          2                          Total          6          2          N/A          2                      Recommended scheduling capacity:                             Software          Memory (GB)          CPU (cores)          Disk (GB)          Nodes                                      IBM FHIR Server          64          16          N/A          3                          Total          64          16          N/A          3                      Note: There is an initContainer with the IBM FHIR Server called the IBM FHIR Server Schema Tool. This tool has a small memory footprint used on initialization of a pod and is accounted for in the above capacities.   How to access the CASE bundle The IBM FHIR Server CASE bundle resides in the Cloud Pak GitHub Repository.  Retrieve and save the CASE bundle if you plan to use the IBM Cloud Pak CLI.   Create a directory to hold the saved CASE, and set the BUNDLE_PATH shell variable to this value, for example:   $ mkdir -p /tmp/fhirCase   $ BUNDLE_PATH=/tmp/fhirCase  Retrieve and save the CASE bundle from the Cloud Pak GitHub repository by using the following command.  $ cloudctl case save --case https://github.com/IBM/cloud-pak/raw/master/repo/case/ibm-fhir-server-case-1.2.0.tgz --outputdir $BUNDLE_PATHThe following output is displayed:   Downloading and extracting the CASE ...  - Success  Retrieving CASE version ...  - Success  Validating the CASE ...  - Success  Creating inventory ...  - Success  Finding inventory items  - Success  Resolving inventory items ...  Parsing inventory items  - Success  Change to the folder where the archive was stored by using the following command. $ cd $BUNDLE_PATH  Verify the CASE (.tgz) file and images (.csv) file have been downloaded.$ ls chartsibm-fhir-server-case-1.2.0-charts.csvibm-fhir-server-case-1.2.0-images.csvibm-fhir-server-case-1.2.0.tgz  Extract the archive by using the following command.$ tar -xzvf ibm-fhir-server-case-1.2.0.tgz ","categories": ["installing"],
        "tags": [],
        "url": "https://ibm.github.io/FHIR/cloudpak/installing/prerequisites/",
        "teaser":null},{
        "title": "Roles and Personas",
        "collection": "1.2",
        "excerpt":"To install, upgrade, or uninstall a FHIR Server Operator, the user must either be bound to the OpenShift role of cluster-admin, or the OpenShift admin role for the specific namespace. To create, update, or delete a FHIR Server Instance, the user must be bound to a OpenShift role such as cluster-admin, admin, or edit. Refer to OpenShift default cluster roles for more information. As an alternative to the OpenShift default cluster roles, the following have been defined:             Role Name      Authority      Resources                  ibmfhirservers.fhirserver.ibm.com-v1beta1-admin      all      ibmfhirservers              ibmfhirservers.fhirserver.ibm.com-v1beta1-crdview      get      customresourcedefinitions              ibmfhirservers.fhirserver.ibm.com-v1beta1-edit      create, update, patch, delete      ibmfhirservers              ibmfhirservers.fhirserver.ibm.com-v1beta1-view      get, list, watch      ibmfhirservers      ","categories": ["installing"],
        "tags": [],
        "url": "https://ibm.github.io/FHIR/cloudpak/installing/roles-and-personas/",
        "teaser":null},{
        "title": "Limitations",
        "collection": "1.2",
        "excerpt":"  The Operator may be deployed into different namespaces, one per namespace.  The Operator has limited support for IBM FHIR Server configuration.  The Operator does not support prepackaged Implementation Guides.  Schema upgrades require downtime: The IBM FHIR Server requires downtime to complete upgrades of the IBM FHIR Server’s relational data. During the upgrade, the database’s schema is updated to support workload for the HL7 FHIR® specification.  There is no rollback from the upgrade and changes to the schema.  The IBM FHIR Server does not support the Terminology Service module configured with the experimental Graph Terminology Service Provider. Enabling this module will result in failure on FHIR server start.","categories": ["installing"],
        "tags": [],
        "url": "https://ibm.github.io/FHIR/cloudpak/installing/limitations/",
        "teaser":null},{
        "title": "Upgrading",
        "collection": "1.2",
        "excerpt":"Upgrading from IBM FHIR Server operator 1.1.0 Prior to upgrading, analyze configuration references to the liberty server.  The name of the server changed from “fhir-server” to “defaultServer”.  Any absolute path references to the liberty server must be changed to the new name. After the upgrade, a reindex is required.  Refer to  IBM FHIR Server - Search Configuration Overview for details on the $reindex operation. There is no rollback from the upgrade and changes to the schema. ","categories": ["installing"],
        "tags": [],
        "url": "https://ibm.github.io/FHIR/cloudpak/installing/upgrading/",
        "teaser":null},{
        "title": "Installing",
        "collection": "1.2",
        "excerpt":"Overview IBM FHIR Server is an operator-based release that uses custom resources to define your IBM FHIR Server configurations as well as manage the entire lifecycle of your IBM FHIR Server instances.  Custom resources are presented as YAML configuration documents.  Each IBM FHIR Server instance is represented by the IBMFHIRServer custom resource type. The following sections provide instructions about installing IBM FHIR Server Operator on the Red Hat OpenShift Container Platform. When deploying in an air-gapped environment see Air Gap Installation before proceeding. Prerequisites Ensure you have setup your OpenShift Container Platform environment and obtained connection details. If you intend to use CLI commands, ensure you have the following installed: • IBM Cloud Pak CLI (cloudctl) • Red Hat OpenShift Container Platform CLI (oc) Create a project (namespace) Allocate a namespace where the IBM FHIR Server Operator and instance(s) will be installed by creating a project.  When you create a project, a namespace with the same name is also created. For finer control of user accesses, you should consider using a single IBM FHIR Server instance per namespace. Important: Do not use any of the default or system namespaces for your IBM FHIR Server installation. Some examples of these are: default, kube-system, kube-public, and openshift-operators. Install catalog source Multiple catalog sources are available for the IBM FHIR Server Operator.  If you have the IBM Operator Catalog in your cluster, you already have access to the IBM FHIR Server Operator and you can proceed to Install the Operator.  Otherwise, continue with catalog source installation. Catalog source content for the IBM FHIR Server Operator Catalog:    apiVersion: operators.coreos.com/v1alpha1   kind: CatalogSource   metadata:      name: ibm-fhir-server-operator-catalog      namespace: openshift-marketplace   spec:      displayName: \"IBM FHIR Server Operator Catalog\"      publisher: IBM      sourceType: grpc      image: icr.io/cpopen/ibm-fhir-server-operator-catalog:latest      updateStrategy:        registryPoll:          interval: 45mAny of the following methods can be used to install the catalog source: Red Hat OpenShift Container Platform web console   Log into the OpenShift Container Platform web console as a cluster administrator.  Click Import YAML.  Paste in the catalog source content and click create.Red Hat OpenShift Container Platform CLI   Log in to your Red Hat OpenShift Container Platform.  Create a file with the catalog source content and save as catalog_source.yaml.      Create the catalog source by using the following command:         $ oc apply -f catalog_source.yaml      IBM Cloud Pak CLI   Download the CASE  (see Prerequisites).      Run the install-catalog action.      $ cloudctl case launch \\  --case $BUNDLE_PATH/&lt;case-file&gt; \\  --namespace openshift-marketplace \\  --inventory ibmFhirServerOperatorSetup \\  --action install-catalog        •\t&lt; case-file&gt; is the CASE file   Install IBM FHIR Server Operator Proceed with installation using the following method: Red Hat OpenShift Container Platform web console       Log into the OpenShift Container Platform web console using your login credentials.         Navigate to OperatorHub.         Change the Project to the namespace you want to work with.         Locate and click on the IBM FHIR Server tile.         Click Install.         Confirm installation options then click Install.   Creating the entitlement key secret Complete the following steps to create a Docker registry secret to enable your deployment to pull operand images from the IBM Entitled Registry. Obtain your entitlement key To obtain your entitlement key, complete the following steps:   Go to the Container software library.  Click Copy key to copy the entitlement key to the clipboard.  Copy the entitlement key to a safe place so you can use it in &lt;link to Create the Docker registry secret&gt;  (Optional) Verify the validity of the key by logging in to the IBM Entitled Registry using a container tool.\tdocker login cp.icr.io --username &lt;user&gt; --password &lt;entitlement-key&gt;Create the Docker registry secret Create a Docker registry secret from OpenShift Container Platform web console. Follow these steps:   Log in to the OpenShift Container Platform web console for your cluster.  From the navigation, click Workloads &gt; Secrets.  Change the project to openshift-config.  From the Name column, click pull-secret &gt; Actions &gt; Edit Secret.  Click Add Credentials.  Provide the following details:            Field      Value                  Registry Server Address      cp.icr.io              Username      Your entitled registry username              Password      Your entitlement key that is generated in step 1.              Email      Your registered email address        Click Save.","categories": ["installing"],
        "tags": [],
        "url": "https://ibm.github.io/FHIR/cloudpak/installing/installing/",
        "teaser":null},{
        "title": "Air Gap Installation",
        "collection": "1.2",
        "excerpt":"Since air gap environments do not have access to the public internet, the following preparation steps are necessary to make the required images accessable to the Red Hat OpenShift Container Platform cluster. If the Red Hat OpenShift Container Platform cluster has a Bastion host, ensure that the Bastion host can access:   The public internet to download the CASE  The source (entitled) image registry where all the images are mirrored from  The target (air gap) image registry where all the images will be mirrored to  The Red Hat OpenShift Container Platform cluster to install the Operator onIn the absence of a Bastion host, a portable host may be used. By downloading the CASE and images onto the portable host, and then transporting the portable host into the air gap environment, the images can then be mirrored to the target (air gap) image registry. If using a Bastion host, refer to Using a Bastion host.If using a portable host, refer to Using a portable host. Using a Bastion host 1. Prepare the Bastion host Ensure you have the following installed on the Bastion host:   Docker CLI (docker)  IBM Cloud Pak CLI (cloudctl)  Red Hat OpenShift Container Platform CLI (oc)  Skopeo (skopeo)2. Download the CASE See Prerequisites. 3. Log into cluster Log into the Red Hat OpenShift Container Platform cluster as a cluster administrator using the oc login command. 4. Configure source registry authentication secret Create the authentication secret for the source (entitled) registry. $ cloudctl case launch \\    --case $BUNDLE_PATH/&lt;case-file&gt; \\    --inventory ibmFhirServerOperatorSetup \\    --action configure-creds-airgap \\    --args \"--registry &lt;source-registry&gt; --user &lt;registry-user&gt; --pass &lt;registry-password&gt;\"  &lt;case-file&gt; is the CASE file  &lt;source-registry&gt; is the source registry  &lt;registry-user&gt; is the username for the source registry  &lt;registry-password&gt; is the password for the source registryThe credentials are saved to $HOME/.airgap/secrets/&lt;source-registry&gt;.json 5. Configure target registry authentication secret Create the authentication secret for the target (air gap) registry. $ cloudctl case launch \\    --case $BUNDLE_PATH/&lt;case-file&gt; \\    --inventory ibmFhirServerOperatorSetup \\    --action configure-creds-airgap \\    --args \"--registry &lt;target-registry&gt; --user &lt;registry-user&gt; --pass &lt;registry-password&gt;\"  &lt;case-file&gt; is the CASE file  &lt;target-registry&gt; is the target registry  &lt;registry-user&gt; is the username for the target registry  &lt;registry-password&gt; is the password for the target registryThe credentials are saved to $HOME/.airgap/secrets/&lt;target-registry&gt;.json 6. Mirror images to target registry Copy the images in the CASE to the target (air gap) registry. $ cloudctl case launch \\    --case $BUNDLE_PATH/&lt;case-file&gt; \\    --inventory ibmFhirServerOperatorSetup \\    --action mirror-images \\    --args \"--registry &lt;target-registry&gt; --inputDir $BUNDLE_PATH\"  &lt;case-file&gt; is the CASE file  &lt;target-registry&gt; is the target registry7. Configure cluster to access target registry   Configure a global image pull secret and ImageContentSourcePolicy resource.$ cloudctl case launch \\    --case $BUNDLE_PATH/&lt;case-file&gt; \\    --namespace openshift-marketplace \\    --inventory ibmFhirServerOperatorSetup \\    --action configure-cluster-airgap \\    --args \"--registry &lt;target-registry&gt; --inputDir $BUNDLE_PATH\"  &lt;case-file&gt; is the CASE file  &lt;target-registry&gt; is the target registryWARNING: This step may restart all cluster nodes. The cluster resources might be unavailable until the time the new pull secret is applied.   Optional: If you are using an insecure target registry, you must add the target registry to the cluster insecureRegistries list.$ oc patch image.config.openshift.io/cluster --type=merge \\    -p '{\"spec\":{\"registrySources\":{\"insecureRegistries\":[\"'&lt;target-registry&gt;'\"]}}}'  &lt;target-registry&gt; is the target registry8. Proceed with installation Now that the air gap installation preparation steps are complete, you may continue with the installation. Using a portable host 1. Prepare the portable host Ensure you have the following installed on the portable host:   Docker CLI (docker)  IBM Cloud Pak CLI (cloudctl)  Red Hat OpenShift Container Platform CLI (oc)  Skopeo (skopeo)2. Download the CASE See Prerequisites. 3. Configure source registry authentication secret Create the authentication secret for the source (entitled) registry. $ cloudctl case launch \\    --case $BUNDLE_PATH/&lt;case-file&gt; \\    --inventory ibmFhirServerOperatorSetup \\    --action configure-creds-airgap \\    --args \"--registry &lt;source-registry&gt; --user &lt;registry-user&gt; --pass &lt;registry-password&gt;\"  &lt;case-file&gt; is the CASE file  &lt;source-registry&gt; is the source registry  &lt;registry-user&gt; is the username for the source registry  &lt;registry-password&gt; is the password for the source registryThe credentials are saved to $HOME/.airgap/secrets/&lt;source-registry&gt;.json 4. Configure portable registry and authentication secret   Initialize the portable registry.$ cloudctl case launch \\    --case $BUNDLE_PATH/&lt;case-file&gt; \\    --inventory ibmFhirServerOperatorSetup \\    --action init-registry \\    --args \"--registry localhost --user &lt;registry-user&gt; --pass &lt;registry-password&gt; \\        --dir $BUNDLE_PATH/imageregistry\"  &lt;case-file&gt; is the CASE file  &lt;registry-user&gt; is the username for the registry, which is initialized to this value  &lt;registry-password&gt; is the password for the registry, which is initialized to this value  Start the portable registry$ cloudctl case launch \\    --case $BUNDLE_PATH/&lt;case-file&gt; \\    --inventory ibmFhirServerOperatorSetup \\    --action start-registry \\    --args \"--registry localhost --port 443 --user &lt;registry-user&gt; --pass &lt;registry-password&gt; \\        --dir $BUNDLE_PATH/imageregistry\"  &lt;case-file&gt; is the CASE file  &lt;registry-user&gt; is the username for the registry  &lt;registry-password&gt; is the password for the registry  Create the authentication secret for the portable registry$ cloudctl case launch \\    --case $BUNDLE_PATH/&lt;case-file&gt; \\    --inventory ibmFhirServerOperatorSetup \\    --action configure-creds-airgap \\    --args \"--registry localhost:443 --user &lt;registry-user&gt; --pass &lt;registry-password&gt;\"  &lt;case-file&gt; is the CASE file  &lt;registry-user&gt; is the username for the registry  &lt;registry-password&gt; is the password for the registryThe credentials are saved to $HOME/.airgap/secrets/localhost:443.json 5. Mirror images to portable registry The following step copies the images in the CASE to the portable registry. $ cloudctl case launch \\    --case $BUNDLE_PATH/&lt;case-file&gt; \\    --inventory ibmFhirServerOperatorSetup \\    --action mirror-images \\    --args \"--registry localhost:443 --inputDir $BUNDLE_PATH\"  &lt;case-file&gt; is the CASE file6. Transport portable device Now that the images are in the portable registry, transport the portable host into the air gap environment. 7. Log into the cluster Log into the Red Hat OpenShift Container Platform cluster as a cluster administrator using the oc login command. 8. Configure target registry authentication secret Create the authentication secret for the target (air gap) registry. $ cloudctl case launch \\    --case $BUNDLE_PATH/&lt;case-file&gt; \\    --inventory ibmFhirServerOperatorSetup \\    --action configure-creds-airgap \\    --args \"--registry &lt;target-registry&gt; --user &lt;registry-user&gt; --pass &lt;registry-password&gt;\"  &lt;case-file&gt; is the CASE file  &lt;target-registry&gt; is the target registry  &lt;registry-user&gt; is the username for the target registry  &lt;registry-password&gt; is the password for the target registryThe credentials are saved to $HOME/.airgap/secrets/&lt;target-registry&gt;.json 9. Mirror images to target registry The following step copies the images in the CASE from the portable registry to the target (air gap) registry. $ cloudctl case launch \\    --case $BUNDLE_PATH/&lt;case-file&gt; \\    --inventory ibmFhirServerOperatorSetup \\    --action mirror-images \\    --args \"--fromRegistry localhost:443 --registry &lt;target-registry&gt; --inputDir $BUNDLE_PATH\"  &lt;case-file&gt; is the CASE file  &lt;target-registry&gt; is the target registry10. Configure cluster to access target registry   Configure a global image pull secret and ImageContentSourcePolicy resource.$ cloudctl case launch \\    --case $BUNDLE_PATH/&lt;case-file&gt; \\    --namespace openshift-marketplace \\    --inventory ibmFhirServerOperatorSetup \\    --action configure-cluster-airgap \\    --args \"--registry &lt;target-registry&gt; --inputDir $BUNDLE_PATH\"  &lt;case-file&gt; is the CASE file  &lt;target-registry&gt; is the target registryWARNING: This step may restart all cluster nodes. The cluster resources might be unavailable until the time the new pull secret is applied.   Optional: If you are using an insecure target registry, you must add the target registry to the cluster insecureRegistries list.$ oc patch image.config.openshift.io/cluster --type=merge \\    -p '{\"spec\":{\"registrySources\":{\"insecureRegistries\":[\"'&lt;target-registry&gt;'\"]}}}'  &lt;target-registry&gt; is the target registry11. Proceed with installation Now that the air gap installation preparation steps are complete, you may continue with the installation. ","categories": ["installing"],
        "tags": [],
        "url": "https://ibm.github.io/FHIR/cloudpak/installing/air-gap-installation/",
        "teaser":null},{
        "title": "Creating an IBM FHIR Server",
        "collection": "1.2",
        "excerpt":"Prerequisites Creating an instance of IBM FHIR Server requires an installed IBM FHIR Server Operator and entitlement key secret. See Installing for instructions to install the IBM FHIR Server Operator. Creating an instance of IBM FHIR Server requires at least namespace administration privileges. If you intend to use CLI commands, ensure you have the following installed:   IBM Cloud Pak CLI (cloudctl)  Red Hat OpenShift Container Platform CLI (oc)Creating an instance Complete the following steps to create an instance of IBM FHIR Server. 1. Define IBM FHIR Server configuration Create Secret resource containing IBM FHIR Server configuration.   Define values for the following secret keys:      IBM_FHIR_SCHEMA_TOOL_INPUT     The value must be set to the contents of the configuration file for IBM FHIR Server Schema Tool.     See Defining the schema tool input for configuring the input.     Put the contents of the configuration file in a file named persistence.json.         IBM_FHIR_SERVER_CONFIG     The value must be set to the contents of the fhir-server-config.json configuration file for IBM FHIR Server.     See IBM FHIR Server for how to create a fhir-server-config.json configuration file.     See creating the configuration for limitation and examples.     Put the contents of the configuration file in a file named fhir-server-config.json.         IBM_FHIR_SERVER_DATASOURCE     The value must be set to the contents of the datasource definition file for IBM FHIR Server.     See creating the datasource for limitation and examples.     Put the contents of the datasource definition file in a file named datasource.xml.         IBM_FHIR_SERVER_ADMIN_PASSWORD     The value must be set to the admin password to use for the IBM FHIR Server.     Put the admin password in a file named admin.txt.         IBM_FHIR_SERVER_USER_PASSWORD     The value must be set to the user password to use for the IBM FHIR Server.     Put the user password in a file named user.txt.         IBM_FHIR_SERVER_CERT     Defining this secret key is optional, but it is recommended when using PostgreSQL as the database.     If defined, the value must be set to the public key of the intermediate CA certificate.     Put the public key of the intermediate CA certificate in a file named db.cert.         IBM_FHIR_SERVER_HOST     Defining this secret key is optional.     If defined, the value must be set to the contents of a configuration file for defining the host.     Put the contents of the configuration file in a file named host.xml.     See Defining the host for how to define the host.         IBM_FHIR_SERVER_TRACE_SPEC     Defining this secret key is optional.     If defined, the value must be set to the contents of a configuration file for defining the trace level.     Put the contents of the configuration file in a file named trace.txt.     See defining the trace specification for how to define the timeout.         IBM_FHIR_SERVER_TRANSACTION_TIMEOUT     Defining this secret key is optional.     If defined, the value must be set to the contents of a configuration file for defining the timeout. You should start with 240s.     Put the contents of the configuration file in a file named timeout.txt.     See defining the transaction timeout for how to define the timeout.     Create the secret from the files.Note: Any keys that are optional do not need to be created in the secret if they are not needed for the configuration.   $ oc create secret generic &lt;secret-name&gt; \\      --from-file=IBM_FHIR_SCHEMA_TOOL_INPUT=./persistence.json \\      --from-file=IBM_FHIR_SERVER_CONFIG=./fhir-server-config.json \\      --from-file=IBM_FHIR_SERVER_DATASOURCE=./datasource.xml \\      --from-file=IBM_FHIR_SERVER_ADMIN_PASSWORD=./admin.txt \\      --from-file=IBM_FHIR_SERVER_USER_PASSWORD=./user.txt \\      --from-file=IBM_FHIR_SERVER_CERT=./db.cert \\      --from-file=IBM_FHIR_SERVER_HOST=./host.xml \\      --from-file=IBM_FHIR_SERVER_TRACE_SPEC=./trace.txt \\      --from-file=IBM_FHIR_SERVER_TRANSACTION_TIMEOUT=./timeout.txt \\      --namespace=&lt;target-namespace&gt;  &lt;secret-name&gt; is the name of the secret to contain the IBM FHIR Server configuration.  &lt;target-namespace&gt; is the target namespace.2. Create IBM FHIR Server instance Create an instance of IBM FHIR Server using one of the following methods: Red Hat OpenShift Container Platform web console       Log into the OpenShift Container Platform web console using your login credentials.         Change the Project to the namespace you want to work with.         Navigate to Installed Operators and click on IBM FHIR Server.         Click Create Instance on the IBMFHIRServer tile.         Enter a name for the instance, and enter the name of the Secret resource containing the IBM FHIR Server configuration.         Set License accept to true.         Click Create.   Red Hat OpenShift Container Platform CLI   Create a file with the following content and save as fhirserver_v1beta1_ibmfhirserver.yaml:    apiVersion: fhirserver.ibm.com/v1beta1kind: IBMFHIRServermetadata:name: ibmfhirserver-samplelabels:         app.kubernetes.io/instance: ibm-fhir-server-operator         app.kubernetes.io/managed-by: ibm-fhir-server-operator         app.kubernetes.io/name: ibm-fhir-server-operatorspec:  secretName: ibmfhirserver-secret  license:        accept: false            Edit this yaml file changing license accept to ‘true’.  Customize the name and secretName if desired.     Create an instance in the target namespace.  $ oc apply -f fhirserver_v1beta1_ibmfhirserver.yaml -n &lt;target-namespace&gt;  &lt;target-namespace&gt; is the target namespace.IBM Cloud Pak CLI   Download the CASE  (see Prerequisites).  Run the apply-custom-resources action to create an instance named “ibmfhirserver-sample”.  $ cloudctl case launch \\      --case $BUNDLE_PATH/&lt;case-file&gt; \\      --namespace &lt;target-namespace&gt; \\      --inventory ibmFhirServerOperator \\      --action apply-custom-resources \\      --args \"--secretName &lt;secret-name&gt;\"  &lt;target-namespace&gt; is the target namespace.  &lt;secret-name&gt; is the name of the Secret resource containing the IBM FHIR Server configuration.Note, by running this action you accept the license. 3. Accessing IBM FHIR Server instance   Verify the IBM FHIR Server instance is functional.  $ oc get ibmfhirservers -n &lt;target-namespace&gt;      &lt;target-namespace&gt; is the target namespace.     The READY value of “True” indicates the IBM FHIR Server instance is functional. The instance will not be functional if the license was not accepted.     Connect to the IBM FHIR Server instance.  $ oc get services -n &lt;target-namespace&gt;      &lt;target-namespace&gt; is the target namespace.     To make external connections to the IBM FHIR Server instance, either port-forward or create a route to the service.     See the IBM FHIR Server User’s Guide for how to verify that it’s running properly by invoking the $healthcheck endpoint.   Updating an instance 1. Update IBM FHIR Server configuration Create a new Secret with the updated configuration by following the Define IBM FHIR Server configuration instructions. 2. Update IBM FHIR Server instance Update the existing instance of IBM FHIR Server to use the new Secret using one of the following methods: Red Hat OpenShift Container Platform web console       Log into the OpenShift Container Platform web console using your login credentials.         Change the Project to the namespace you want to work with.         Navigate to Installed Operators and click on IBM FHIR Server.         Click the IBM FHIR Server tab.         Click on the instance.         Click the YAML tab.         Update the spec.secretName field with name of the Secret resource containing the IBM FHIR Server configuration.         Click Save.   Red Hat OpenShift Container Platform CLI   Create a file with the following content and save as fhirserver_v1beta1_ibmfhirserver.yaml:    apiVersion: fhirserver.ibm.com/v1beta1kind: IBMFHIRServermetadata:name: &lt;instance-name&gt;labels:         app.kubernetes.io/instance: ibm-fhir-server-operator         app.kubernetes.io/managed-by: ibm-fhir-server-operator         app.kubernetes.io/name: ibm-fhir-server-operatorspec:  secretName: &lt;secret-name&gt;  license:        accept: false            Edit this yaml file changing license accept to ‘true’ and setting required fields:           &lt;instance-name&gt; is the FHIR Server instance.      &lt;secret-name&gt; is the name of the Secret resource containing the IBM FHIR Server configuration.        Update the instance in the target namespace.  $ oc apply -f fhirserver_v1beta1_ibmfhirserver.yaml -n &lt;target-namespace&gt;  &lt;target-namespace&gt; is the target namespace.IBM Cloud Pak CLI   Download the CASE  (see Prerequisites).  Run the apply-custom-resources action to update an instance named “ibmfhirserver-sample”.  $ cloudctl case launch \\      --case $BUNDLE_PATH/&lt;case-file&gt; \\      --namespace &lt;target-namespace&gt; \\      --inventory ibmFhirServerOperator \\      --action apply-custom-resources \\      --args \"--secretName &lt;secret-name&gt;\"  &lt;target-namespace&gt; is the target namespace.  &lt;secret-name&gt; is the name of the Secret resource containing the IBM FHIR Server configuration.Note, by running this action you accept the license. Scaling By default, an IBM FHIR Server deployment uses 2 replicas. You can scale the deployment by using the OpenShift Container Platform web console.   Log into the OpenShift Container Platform web console using your login credentials.  Change the Project to the namespace you want to work with.  Navigate to Deployments and click on the IBM FHIR Server to be scaled.  Find the number of pods currently allocated in Deployment Details.  Click up arrow to increase or down arrow to decrease the number of desired pods for this deployment.If preferred, you can use Red Hat OpenShift Container Platform CLI to scale your deployment. Defining the schema tool input For the IBM FHIR Server Schema Tool, the database must be configured with a functional user, which is referred to as FHIRSERVER. Db2 The type must be specified as ‘db2’, the behavior must be ‘onboard’, and the corresponding database settings must be input into the json format. The tenant name must be default. Example: persistence.json   {      \"persistence\": [          {              \"db\":  {                  \"host\": \"example.appdomain.cloud\",                  \"port\": \"20010\",                  \"database\": \"bludb\",                  \"user\": \"myuser\",                  \"password\": \"password\",                  \"type\": \"db2\",                  \"ssl\": \"true\"              },              \"tenant\": {                  \"name\": \"default\",                  \"key\": \"custom-key-here\"              },              \"schema\": {                  \"fhir\": \"FHIRDATA\",                  \"batch\": \"FHIR_JBATCH\",                  \"oauth\": \"FHIR_OAUTH\"              },              \"grant\":  \"FHIRSERVER\",              \"behavior\": \"onboard\"          }      ]  }For db2, it is recommended that the granted user, and the schemas be configured as uppercase.  Further, the user schema names up to database limited sizes. Whatever is chosen as the schema name must match in the datasource.xml and the fhir-server-config.json. The tenant-key is further used in the fhir-server-config.json to authorize the configuration’s access to the fhir schema’s data partition. Postgres The type must be specified as ‘postgresql’, the behavior must be ‘onboard’, and the corresponding database settings must be input into the json format. The certificate must be the base64 encoding of the trusted Certificate Authority of the Database server. Example: persistence.json   {      \"persistence\": [          {              \"db\":  {                  \"host\": \"example.appdomain.cloud\",                  \"port\": \"13999\",                  \"database\": \"ibmclouddb\",                  \"user\": \"dbuser\",                  \"password\": \"password\",                  \"type\": \"postgresql\",                  \"ssl\": \"true\",                  \"certificate_base64\": \"DWHuqdAPsuE67b4FP3mdUYVnY99wjCPm2vYA\"              },              \"schema\": {                  \"fhir\": \"FHIRDATA\",                  \"batch\": \"FHIR_JBATCH\",                  \"oauth\": \"FHIR_OAUTH\"              },              \"grant\":  \"FHIRSERVER\",              \"behavior\": \"onboard\"          }      ]  }For postgres, it is recommended that the granted user, and the schemas be configured as uppercase.  Further, the user schema names up to database limited sizes. Whatever is chosen as the schema name must match in the datasource.xml and the fhir-server-config.json. For production usage, it is highly recommended that the Database Access use SSL. Note, the schema tool does not support Apache Derby. The configuration does not support multiple tenants. For more detail, see IBM FHIR Server Schema Tool for how to create a configuration file. Creating the configuration The installer of the IBM FHIR Server must make sure the configuration is a valid IBM FHIR Server json, and a fhirServer/persistence/datasources entry must be created for postgresql or db2. The currentSchema must match the schema/fhir entry in the persistence.json. For db2, the tenantKey must match the entry in persistence.json. The hints and searchOptimizerOptions are recommended. Example: db2 \"datasources\": {    \"default\": {        \"type\": \"db2\",        \"tenantKey\": \"custom-key-here\",        \"currentSchema\": \"FHIRDATA\",        \"hints\": {            \"search.reopt\": \"ONCE\"        }    }Example: postgresql \"datasources\": {    \"default\": {        \"type\": \"postgresql\",        \"currentSchema\": \"FHIRDATA\",        \"searchOptimizerOptions\": {            \"from_collapse_limit\": 12,            \"join_collapse_limit\": 12        }    }}Note, the schema tool does not support Apache Derby. The configuration does not support multiple tenants. Note, the bulk data feature does not support the File and Http StorageProvider types. To view examples of the IBM FHIR Server fhir-server-config.json, please refer to https://github.com/IBM/FHIR/tree/4.9.1/fhir-server/liberty-config/config/default. The documentation of the possible configuration elements are https://github.com/IBM/FHIR/tree/4.9.1/fhir-server/liberty-config/config/default. Creating the datasource The datasources must be configured with the default tenant and default datastore. The IBM FHIR Server uses the format jdbc/fhir_ and the tenant id and datastore id to look the datasource when executing any FHIR data operation.  The jdbc/fhirbatchDB is fixed, and must not be changed in order to use the bulk data feature. The configuration must match the configuration defined in the persistence.json secret. Db2 The following is an example of the db2 datasource to support bulk data and fhir data.   &lt;server&gt;      &lt;dataSource id=\"fhirDefaultDefault\" jndiName=\"jdbc/fhir_default_default\" type=\"javax.sql.XADataSource\" statementCacheSize=\"200\" syncQueryTimeoutWithTransactionTimeout=\"true\" validationTimeout=\"30s\"&gt;          &lt;jdbcDriver javax.sql.XADataSource=\"com.ibm.db2.jcc.DB2XADataSource\" libraryRef=\"sharedLibDb2\"/&gt;          &lt;properties.db2.jcc              serverName=\"example.appdomain.cloud\"              portNumber=\"20010\"              user=\"fhirserver\"              password=\"change-password\"              databaseName=\"FHIRDB\"              currentSchema=\"FHIRDATA\"              driverType=\"4\"              sslConnection=\"true\"          /&gt;          &lt;connectionManager maxPoolSize=\"200\" minPoolSize=\"40\"/&gt;      &lt;/dataSource&gt;      &lt;dataSource id=\"fhirbatchDS\" jndiName=\"jdbc/fhirbatchDB\" type=\"javax.sql.XADataSource\" statementCacheSize=\"200\" syncQueryTimeoutWithTransactionTimeout=\"true\" validationTimeout=\"30s\"&gt;          &lt;jdbcDriver javax.sql.XADataSource=\"com.ibm.db2.jcc.DB2XADataSource\" libraryRef=\"sharedLibDb2\"/&gt;          &lt;properties.db2.jcc              serverName=\"example.appdomain.cloud\"              portNumber=\"20010\"              user=\"fhirserver\"              password=\"change-password\"              databaseName=\"FHIRDB\"              currentSchema=\"FHIR_JBATCH\"              driverType=\"4\"              sslConnection=\"true\"/&gt;      &lt;/dataSource&gt;      &lt;variable name=\"BATCH_DB_SCHEMA\" value=\"FHIR_JBATCH\"/&gt;  &lt;/server&gt;Postgres The following is an example of the postgres datasource to support bulk data and fhir data.   &lt;server&gt;      &lt;dataSource id=\"fhirDefaultDefault\" jndiName=\"jdbc/fhir_default_default\" type=\"javax.sql.XADataSource\" statementCacheSize=\"200\" syncQueryTimeoutWithTransactionTimeout=\"true\" validationTimeout=\"30s\"&gt;          &lt;jdbcDriver javax.sql.XADataSource=\"org.postgresql.xa.PGXADataSource\" libraryRef=\"sharedLibPostgres\"/&gt;          &lt;properties.postgresql              serverName=\"example.appdomain.cloud\"              portNumber=\"13999\"              databaseName=\"ibmclouddb\"              user=\"fhirserver\"              password=\"change-password\"              currentSchema=\"fhirdata\"              sslmode=\"verify-full\"              ssl=\"true\"              sslrootcert=\"/opt/ol/wlp/usr/servers/defaultServer/config/default/db.cert\"          /&gt;          &lt;connectionManager maxPoolSize=\"200\" minPoolSize=\"40\"/&gt;      &lt;/dataSource&gt;      &lt;dataSource id=\"fhirbatchDS\" jndiName=\"jdbc/fhirbatchDB\" type=\"javax.sql.XADataSource\" statementCacheSize=\"200\" syncQueryTimeoutWithTransactionTimeout=\"true\" validationTimeout=\"30s\"&gt;          &lt;jdbcDriver javax.sql.XADataSource=\"org.postgresql.xa.PGXADataSource\" libraryRef=\"sharedLibPostgres\"/&gt;          &lt;properties.postgresql              serverName=\"example.appdomain.cloud\"              portNumber=\"13999\"              databaseName=\"ibmclouddb\"              user=\"fhirserver\"              password=\"change-password\"              currentSchema=\"FHIR_JBATCH\"              sslmode=\"verify-full\"              ssl=\"true\"              sslrootcert=\"/opt/ol/wlp/usr/servers/defaultServer/config/default/db.cert\"          /&gt;          &lt;connectionManager maxPoolSize=\"200\" minPoolSize=\"40\"/&gt;      &lt;/dataSource&gt;      &lt;variable name=\"BATCH_DB_SCHEMA\" value=\"FHIR_JBATCH\"/&gt;  &lt;/server&gt;Note, the schema tool does not support Apache Derby. The configuration does not support multiple tenants and does not support multiple datasources. Note, the sslrootcert is a fixed path mounted by the IBM FHIR Server Operator. Note, if you change the default FHIR_JBATCH java batch schema is changed, please update the optional variable’s value for &lt;variable name=\"BATCH_DB_SCHEMA\" value=\"FHIR_JBATCH\"/&gt; See IBM FHIR Server for how to create a datasource definition file via Liberty configDropin. Defining the host It is recommended, for security purposes, to explicitly define the hosts for which the IBM FHIR Server will handle requests. For any Route resources created for the IBM FHIR Server, ensure those hosts (e.g. test-fhir-server) are represented in the configuration file. For example, the following configuration limits access to 9443 locally on the server, and the incoming route https://my-fhir-server.com. The host should match the host defined in the route. &lt;server description=\"fhir-server\"&gt;    &lt;httpEndpoint host=\"*\" httpPort=\"-1\" httpsPort=\"9443\" id=\"defaultHttpEndpoint\" onError=\"FAIL\" /&gt;    &lt;virtualHost id=\"default_host\" allowedFromEndpointRef=\"defaultHttpEndpoint\"&gt;      &lt;hostAlias&gt;*:9443&lt;/hostAlias&gt;      &lt;hostAlias&gt;my-fhir-server.com:443&lt;/hostAlias&gt;    &lt;/virtualHost&gt;&lt;/server&gt;Defining the trace specification The Trace specification is the trace string format used by Open Liberty.   Normal Operation - *=INFO  Trace Database access - *=info:com.ibm.fhir.persistence.jdbc.dao.impl.*=FINE:com.ibm.fhir.database.utils.query.QueryUtil=FINE  Trace all IBM FHIR Server - *=info:com.ibm.fhir.*=FINEDefining the transaction timeout The timeout controls the transaction timeout used when the IBM FHIR Server cluster connects to the user defined database. This value is the maximum time allowed for transactions started on the server to complete. Any transaction must be complete before this timeout, or the transaction is rolled back. Specify a positive integer followed by a unit of time, which can be hours (h), minutes (m), or seconds (s). For example, specify 30 seconds as 30s. You can include multiple values in a single entry. For example, 1m30s is equivalent to 90 seconds. The timeout value should not be smaller than 240 seconds. ","categories": ["installing"],
        "tags": [],
        "url": "https://ibm.github.io/FHIR/cloudpak/installing/creating/",
        "teaser":null},{
        "title": "Tracking License Usage",
        "collection": "1.2",
        "excerpt":"License Service is required for monitoring and measuring license usage of IBM FHIR Server in accord with the pricing rule for containerized environments. Manual license measurements are not allowed. Deploy License Service on all clusters where IBM FHIR Server is installed. The IBM FHIR Server Operator contains an integrated service for measuring the license usage at the cluster level for license evidence purposes. Overview The integrated licensing solution collects and stores the license usage information which can be used for audit purposes and for tracking license consumption in cloud environments. The solution works in the background and does not require any configuration. Only one instance of the License Service is deployed per cluster regardless of the number of Cloud Paks and containerized products that you have installed on the cluster. Deploying License Service Deploy License Service on each cluster where IBM FHIR Server is installed. License Service can be deployed on any Kubernetes cluster. For more information about License Service, how to install and use it, see the License Service documentation. Validating if License Service is deployed on the cluster To ensure license reporting continuity for license compliance purposes make sure that License Service is successfully deployed. It is recommended to periodically verify whether it is active. To validate whether License Service is deployed and running on the cluster, you can, for example, log into the Red Hat OpenShift Container Platform cluster and run the following command: $ oc get pods --all-namespaces | grep ibm-licensing | grep -v operatorThe following response is a confirmation of successful deployment: 1/1     RunningArchiving license usage data Remember to archive the license usage evidence before you decommission the cluster where IBM FHIR Server was deployed. Retrieve the audit snapshot for the period when IBM FHIR Server was on the cluster and store it in case of audit. For more information about the licensing solution, see License Service documentation. ","categories": ["installing"],
        "tags": [],
        "url": "https://ibm.github.io/FHIR/cloudpak/installing/tracking-license/",
        "teaser":null},{
        "title": "Uninstalling",
        "collection": "1.2",
        "excerpt":"You can delete an IBM FHIR Server instance by using the OpenShift Container Platform web console. You can also uninstall the IBM FHIR Server operator and the catalog. Deleting an IBM FHIR Server instance       Log into the OpenShift Container Platform web console using your login credentials.         Change the Project to the namespace you want to work with.         Navigate to Installed Operators and click on the IBM FHIR Server operator.         Navigate to the IBM FHIR Server tab and click on the instance you want to delete.         Select Delete IBMFHIRServer from the Actions menu.   Uninstalling the Operator       Log into the OpenShift Container Platform web console using your login credentials.         Change the Project to the namespace you want to work with.         Navigate to Installed Operators and click on the IBM FHIR Server operator.         Select Uninstall Operator from the Actions menu.   Uninstalling the catalog The latest version of the IBM Operator Catalog includes the IBM FHIR Server Operator. If that catalog is installed, you may have skipped creating the ibm-fhir-server-operator-catalog CatalogSource resource, in which case, these instructions do not apply.       Log into the OpenShift Container Platform web console using your login credentials.         Navigate to Custom Resource Definitions and click on CatalogSource.         Navigate to the Instances tab and click on ibm-fhir-server-operator-catalog.         Select Delete CatalogSource from the Actions menu.   ","categories": ["installing"],
        "tags": [],
        "url": "https://ibm.github.io/FHIR/cloudpak/installing/uninstalling/",
        "teaser":null},{
        "title": "Security",
        "collection": "1.2",
        "excerpt":"Data in motion   To secure all inbound and outbound requests from the IBM FHIR Server are recommended to be encrypted.  Users are recommended to use TLS v1.2.Data at rest   The prerequisite database must have data encryption enabled.  Each instance is responsible for Backup and Recovery of the Database and must backup solution specific configurations.Security Context Constraints   By default, the IBM FHIR Server Operator uses the restricted SecurityContextConstraints resource.","categories": ["security"],
        "tags": [],
        "url": "https://ibm.github.io/FHIR/cloudpak/security/security/",
        "teaser":null},{
        "title": "Chat with us on Slack",
        "collection": "support",
        "excerpt":"","categories": [],
        "tags": [],
        "url": "https://ibm.github.io/FHIR/cloudpak/support/chatOnSlack/",
        "teaser":null},{
        "title": "Give us feedback",
        "collection": "support",
        "excerpt":"","categories": [],
        "tags": [],
        "url": "https://ibm.github.io/FHIR/cloudpak/support/giveUsFeedback/",
        "teaser":null},{
        "title": "IBM Support",
        "collection": "support",
        "excerpt":"","categories": [],
        "tags": [],
        "url": "https://ibm.github.io/FHIR/cloudpak/support/ibmSupport/",
        "teaser":null},]
